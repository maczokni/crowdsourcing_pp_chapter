knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
PP_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
library(dplyr)
voter <- PP_data %>%
group_by(voter_uniqueid) %>%
summarise(num_votes = n())
View(voter)
voter %>% arrange(num_votes) %>% head(1) %>% pull(num_votes)
voter %>% arrange(-num_votes) %>% head(1) %>% pull(num_votes)
nrow(voter %>% filter(num_votes == 1))
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
top_1percent <- subset(voter, num_votes > quantile(Freq, prob = 1 - 1/100))
top_1percent <- subset(voter, num_votes > quantile(num_votes, prob = 1 - 1/100))
sum(top_1percent$num_votes) / sum(voter$num_votes) * 100
round(sum(top_1percent$num_votes) / sum(voter$num_votes) * 100, 2)
top_10percent <- subset(voter, num_votes > quantile(num_votes, prob = 1 - 10/100)) #subset top 10% participants
sum(top_10percent$num_votes) / sum(voter$num_votes) * 100 #Proportion of votes by top 10% participants
top_25percent <- subset(voter, num_votes > quantile(num_votes, prob = 1 - 25/100)) #subset top 25% participants
sum(top_25percent$num_votes) / sum(voter$num_votes) * 100 #Proportion of votes by top 25% participants
library(ineq)
Gini(voter$num_votes)
Lc <- Lc(N_votes$Var1, n = N_votes$Freq) #Calculate Lorenz curve
plot(Lc(voter$num_votes), xlab = "Cumulative share of participants from lowest to higher number of votes",
ylab = "Cumulative share of votes") #Plot Lorenz curve
plot(Lc(voter$num_votes), xlab = "Cumulative share of participants from lowest to higher number of votes",
ylab = "Cumulative share of votes",col="darkred",lwd=2)
pp_data <- PP_data
pp_atl <- pp_data[which(pp_data$place_name_right == "Atlanta" | pp_data$place_name_left == "Atlanta"), ]
pp_atl_s <- pp_atl[ which(pp_atl$study_question == "safer"), ]
library(rnaturalearth)
vignette('what-is-a-country', package='rnaturalearth')
library(sf)
st_read("https://opendata.arcgis.com/datasets/34520575dfc34b8cac783caff702b8cc_58.geojson")
atl <- st_read("https://opendata.arcgis.com/datasets/34520575dfc34b8cac783caff702b8cc_58.geojson")
plot(st_geometry(atl))
atl <- st_read("https://opendata.arcgis.com/datasets/297d3d69d8ab4c6ba5f9264ad5e75c0a_3.geojson")
plot(st_geometry(atl))
table(pp_atl_s$place_name_right == "Atlanta" & pp_atl_s$place_name_left == "Atlanta") #count votes in which both images are from Atlanta
pp_atl_s <- pp_atl_s[order(pp_atl_s$X), ] #order file by vote number
pp_atl_s_dup <- pp_atl_s[which(pp_atl_s$place_name_right == "Atlanta" & pp_atl_s$place_name_left == "Atlanta"), ] #create new dataset of votes in which both images are from Atlanta (We will duplicate them)
pp_atl_s$long_Atl[pp_atl_s$place_name_left == "Atlanta" & pp_atl_s$place_name_right != "Atlanta"] <- pp_atl_s$long_left[pp_atl_s$place_name_left == "Atlanta" & pp_atl_s$place_name_right != "Atlanta"] #allocate coordinates to votes in which left image is from Atlanta
pp_atl_s$lat_Atl[pp_atl_s$place_name_left == "Atlanta" & pp_atl_s$place_name_right != "Atlanta"] <- pp_atl_s$lat_left[pp_atl_s$place_name_left == "Atlanta" & pp_atl_s$place_name_right != "Atlanta"]
pp_atl_s$long_Atl[pp_atl_s$place_name_right == "Atlanta" & pp_atl_s$place_name_left != "Atlanta"] <- pp_atl_s$long_right[pp_atl_s$place_name_right == "Atlanta" & pp_atl_s$place_name_left != "Atlanta"] #allocate coordinates to votes in which right image is from Atlanta
pp_atl_s$lat_Atl[pp_atl_s$place_name_right == "Atlanta" & pp_atl_s$place_name_left != "Atlanta"] <- pp_atl_s$lat_right[pp_atl_s$place_name_right == "Atlanta" & pp_atl_s$place_name_left != "Atlanta"]
pp_atl_s$long_Atl[pp_atl_s$place_name_right == "Atlanta" & pp_atl_s$place_name_left == "Atlanta"] <- pp_atl_s$long_left[pp_atl_s$place_name_right == "Atlanta" & pp_atl_s$place_name_left == "Atlanta"] #allocate coordinates from left image to votes in which both images are from Atlanta
pp_atl_s$lat_Atl[pp_atl_s$place_name_right == "Atlanta" & pp_atl_s$place_name_left == "Atlanta"] <- pp_atl_s$lat_left[pp_atl_s$place_name_right == "Atlanta" & pp_atl_s$place_name_left == "Atlanta"]
pp_atl_s_dup$long_Atl <- pp_atl_s_dup$long_right #allocate coordinates from right image to votes in which both images are from Atlanta
pp_atl_s_dup$lat_Atl <- pp_atl_s_dup$lat_right
pp_atl_s <- rbind(pp_atl_s, pp_atl_s_dup) #merge duplicated cases where both images are from Atlanta
pp_atl_s$win[pp_atl_s$long_right == pp_atl_s$long_Atl & pp_atl_s$choice == "right"] <- 1 #code 'safer' votes as 1 and 'less safe' and 'equal' as 0
pp_atl_s$win[pp_atl_s$long_left == pp_atl_s$long_Atl & pp_atl_s$choice == "left"] <- 1
pp_atl_s$win[pp_atl_s$long_right == pp_atl_s$long_Atl & pp_atl_s$choice == "left"] <- 0
pp_atl_s$win[pp_atl_s$long_right == pp_atl_s$long_Atl & pp_atl_s$choice == "equal"] <- 0
pp_atl_s$win[pp_atl_s$long_left == pp_atl_s$long_Atl & pp_atl_s$choice == "right"] <- 0
pp_atl_s$win[pp_atl_s$long_left == pp_atl_s$long_Atl & pp_atl_s$choice == "equal"] <- 0
table(pp_atl_s$win) #count frequency of 'safer' votes in Atlanta against 'equal' and 'less safe' votes
prop.table(table(pp_atl_s$win))*100 #count % of 'safer' votes in Atlanta against 'equal' and 'less safe' votes
st_crs(Atlanta_map)
st_crs(atl)
names(pp_atl_s_dup)
names(pp_atl_s)
points_atl_s <- st_as_sf(pp_atl_s, coords = c("lat_Atl", "long_Atl")) #geocode 'safe' votes in Atlanta
st_crs(Points_Atl_s) == st_crs(Atlanta_map) #check if coordinate reference system is the same of both layers
st_crs(points_atl_s) == st_crs(atl) #check if coordinate reference system is the same of both layers
st_crs(points_atl_s)
st_crs(atl)
points_atl_s <- st_transform(points_atl_s, crs = st_crs(atl))
st_crs(points_atl_s) <- st_crs(atl)
st_crs(points_atl_s) == st_crs(atl) #check if coordinate reference system is the same of both layers
library(ggplot2)
ggplot(data = atl) +
geom_sf() +
theme_void() +
coord_sf(xlim = c(-83.7, -85), ylim = c(33.2, 34.5), expand = FALSE) +
geom_sf(data = points_atl_s) #visualise points on the map
ggplot(data = atl) +
geom_sf() +
theme_void() +
coord_sf(xlim = c(-83.7, -85), ylim = c(33.2, 34.5), expand = FALSE) +
geom_sf(data = points_atl_s_dup) #visualise points on the map
points_atl_s <- st_as_sf(pp_atl_s_dup, coords = c("lat_Atl", "long_Atl")) #geocode 'safe' votes in Atlanta
st_crs(points_atl_s) == st_crs(atl) #check if coordinate reference system is the same of both layers
st_crs(points_atl_s) <- st_crs(atl)
st_crs(points_atl_s) == st_crs(atl) #check if coordinate reference system is the same of both layers
ggplot(data = atl) +
geom_sf() +
theme_void() +
coord_sf(xlim = c(-83.7, -85), ylim = c(33.2, 34.5), expand = FALSE) +
geom_sf(data = points_atl_s_dup) #visualise points on the map
ggplot(data = atl) +
geom_sf() +
theme_void() +
coord_sf(xlim = c(-83.7, -85), ylim = c(33.2, 34.5), expand = FALSE) +
geom_sf(data = points_atl_s) #visualise points on the map
points_atl_s_nhood <- st_intersection(atl, points_atl_s)
names(points_atl_s_nhood)
View(head((points_atl_s_nhood))
)
names(pp_atl_s)
points_atl_s <- st_as_sf(pp_atl_s, coords = c("lat_Atl", "long_Atl")) #geocode 'safe' votes in Atlanta
st_crs(points_atl_s) == st_crs(atl) #check if coordinate reference system is the same of both layers
st_crs(points_atl_s) <- st_crs(atl)
st_crs(points_atl_s) == st_crs(atl) #check if coordinate reference system is the same of both layers
ggplot(data = atl) +
geom_sf() +
theme_void() +
coord_sf(xlim = c(-83.7, -85), ylim = c(33.2, 34.5), expand = FALSE) +
geom_sf(data = points_atl_s) #visualise points on the map
View(head(points_atl_s))
points_atl_s_nhood <- st_intersection(atl, points_atl_s) %>%
group_by(NAME) %>%
summarise(winscore = mean(win, na.rm = TRUE))
View(points_atl_s_nhood)
atl_pp_wins <- left_join(atl, points_atl_s_nhood, by = c("NAME" == "NAME"))
st_geometry(points_atl_s_nhood) <- NULL
atl_pp_wins <- left_join(atl, points_atl_s_nhood, by = c("NAME" == "NAME"))
atl_pp_wins <- left_join(atl, points_atl_s_nhood, by = c("NAME" = "NAME"))
ggplot(data = atl) +
geom_sf(aes(fill = winscore)) +
theme_void() +
coord_sf(xlim = c(-83.7, -85), ylim = c(33.2, 34.5), expand = FALSE)
ggplot(data = atl_pp_wins) +
geom_sf(aes(fill = winscore)) +
theme_void() +
coord_sf(xlim = c(-83.7, -85), ylim = c(33.2, 34.5), expand = FALSE)
ggplot(data = atl_pp_wins) +
geom_sf(aes(fill = winscore)) +
theme_void()
geom_sf(data = points_atl_s) #visualise points on the map
ggplot(data = atl) +
geom_sf() +
theme_void() +
geom_sf(data = points_atl_s) #visualise points on the map
summary(atl_pp_wins$winscore) #descriptive statistics of proportion of 'safer' votes per tract
points_atl_s_nhood <- st_intersection(atl, points_atl_s) %>%
group_by(NAME) %>%
summarise(winscore = mean(win, na.rm = TRUE),
num_votes = n())
st_geometry(points_atl_s_nhood) <- NULL
atl_pp_wins <- left_join(atl, points_atl_s_nhood, by = c("NAME" = "NAME"))
ggplot(data = atl_pp_wins) +
geom_sf(aes(fill = winscore)) +
theme_void()
summary(atl_pp_wins$winscore) #descriptive statistics of proportion of 'safer' votes per tract
summary(Votes_areas$n)
summary(atl_pp_wins$num_votes)
library(ggplot2)
library(sf)
library(ineq)
library(dplyr)
library(lubridate)
View(head(PP_data$day))
by_day <- pp_data %>%
group_by(ymd(day)) %>%
summarise(num_votes = n()) %>%
complete(day = seq.Date(min(day), max(day), by="day"))
??complete
library(survival)
by_day <- pp_data %>%
group_by(ymd(day)) %>%
summarise(num_votes = n()) %>%
complete(day = seq.Date(min(day), max(day), by="day"))
by_day <- pp_data %>%
group_by(ymd(day)) %>%
summarise(num_votes = n()) %>%
survival::complete(day = seq.Date(min(day), max(day), by="day"))
library(tidyr)
by_day <- pp_data %>%
group_by(ymd(day)) %>%
summarise(num_votes = n()) %>%
complete(day = seq.Date(min(day), max(day), by="day"))
by_day <- pp_data %>%
mutate(day = ymd(day)) %>%
group_by(day) %>%
summarise(num_votes = n()) %>%
complete(day = seq.Date(min(day), max(day), by="day"))
View(by_day)
by_day <- pp_data %>%
mutate(day = ymd(day)) %>%
group_by(day) %>%
summarise(num_votes = n()) %>%
complete(day = seq.Date(min(day), max(day), by="day")) %>%
fill(0)
by_day <- pp_data %>%
mutate(day = ymd(day)) %>%
group_by(day) %>%
summarise(num_votes = n()) %>%
complete(day = seq.Date(min(day), max(day), by="day")) %>%
replace_na(0)
by_day <- pp_data %>%
mutate(day = ymd(day)) %>%
group_by(day) %>%
summarise(num_votes = n()) %>%
complete(day = seq.Date(min(day), max(day), by="day")) %>%
mutate(num_votes = replace_na(num_votes, 0))
by_day <- pp_data %>%
mutate(day = ymd(day)) %>%
group_by(day) %>%
summarise(num_votes = n()) %>%
complete(day = seq.Date(min(day), max(day), by="day")) %>%
mutate(num_votes = replace_na(num_votes, 0))
by_day <- pp_data %>%
mutate(day = ymd(day)) %>%
group_by(day) %>%
summarise(num_votes = n()) %>%
complete(day = seq.Date(min(day), max(day), by="day")) %>%
mutate(num_votes = replace_na(num_votes, 0))
ggplot(by_day, aes(x = day, y = num_votes)) +
geom_line() +
geom_smooth(lwd = 1.5, col = "red") +
theme_bw() +
xlab("Days since website launch") +
ylab("Number of votes")
PP_data <- read.csv('https://ndownloader.figshare.com/files/21739137') #this may take some minutes
Voter <- table(PP_data$voter_uniqueid) #create table of number of votes per participant
Voter <- as.data.frame(Voter) #convert table into dataframe
Voter_top1 <- subset(Voter, Freq > quantile(Freq, prob = 1 - 1/100)) #subset top 1% participants
sum(Voter_top1$Freq) / sum(Voter$Freq) * 100 #Proportion of votes by top 1% participants
PP_data <- read.csv('https://ndownloader.figshare.com/files/21739137') #this may take some minutes
tinytex::install_tinytex()
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(ggplot2)
library(sf)
library(ineq)
library(dplyr)
library(lubridate)
library(tidyr)
top_n(count(pp_data$place_name_left), 5)
?top_n
pp_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
top_n(count(pp_data$place_name_left), 5)
library(readr)
pp_data <- read_csv('https://ndownloader.figshare.com/files/21739137')
top_n(count(pp_data$place_name_left), 5)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(ggplot2)
library(sf)
library(ineq)
library(dplyr)
library(lubridate)
library(tidyr)
count(pp_data$place_name_left)
count(pp_data$place_name_left)
View(head(pp_data))
top_n(count(pp_data$place_name_right), 5)
pp_data$place_name_left[2]
?count
library(dplyr)
top_n(count(pp_data$place_name_left), 5)
pp_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
top_n(count(pp_data$place_name_left), 5)
top_n(dplyr::count(pp_data$place_name_left), 5)
count(pp_data$study_question)
