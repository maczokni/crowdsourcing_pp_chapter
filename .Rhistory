long_Atl == long_left &
lat_Atl  == lat_left
} if (place_name_right == "Atlanta") {
pp_atl_s <- pp_atl_s %>%
filter(
if (place_name_left == "Atlanta") {
long_Atl == long_left &
lat_Atl  == lat_left
}
else {
long_Atl == long_right &
lat_Atl  == lat_right
}
)
View(points_atl_s)
View(pp_atl_s)
pp_atl <- pp_data %>%
filter(place_name_right == "Atlanta" | place_name_left == "Atlanta")
pp_atl_s <- pp_atl %>%
filter(study_question == "safer")
#create dataset of votes in which both images are from Atlanta
pp_atl_s_dup  <- pp_atl_s %>%
filter(place_name_right == "Atlanta" & place_name_left == "Atlanta")
#print the count as a result
pp_atl_s_dup %>%
summarize(count = n())
# duplicate new dataset
pp_atl_s_dup2 <- pp_atl_s_dup
# delete duplicated from main dataset
pp_atl_s <- pp_atl_s %>%
anti_join(x = pp_atl_s, y = pp_atl_s_dup, by = "X")
pp_atl_s <- pp_atl_s %>%
filter(
if (place_name_left == "Atlanta") {
long_Atl == long_left &
lat_Atl  == lat_left
}
else {
long_Atl == long_right &
lat_Atl  == lat_right
}
)
pp_atl_s <- pp_atl_s %>%
filter(
if (place_name_left == "Atlanta") {
mutate(long_Atl == long_left,
lat_Atl  == lat_left)
}
else {
mutate(long_Atl == long_right &
lat_Atl  == lat_right)
}
)
pp_atl_s <- pp_atl_s %>%
filter(
if (place_name_left == "Atlanta") {
summarise(long_Atl == long_left,
lat_Atl  == lat_left)
}
else {
summarise(long_Atl == long_right &
lat_Atl  == lat_right)
}
)
pp_atl_s <- pp_atl_s %>%
filter(
if (place_name_left == "Atlanta") {
mutate(long_Atl = long_left,
lat_Atl  = lat_left)
}
else {
mutate(long_Atl = long_right &
lat_Atl  = lat_right)
pp_atl_s <- pp_atl_s %>%
filter(
if (place_name_left == "Atlanta") {
mutate(long_Atl = long_left,
lat_Atl  = lat_left)
}
else {
mutate(long_Atl = long_right,
lat_Atl  = lat_right)
}
)
pp_atl_s <- pp_atl_s %>%
mutate(long_Atl = if_else(place_name_left == "Atlanta", long_left, long_right),
lat_Atl  = if_else(place_name_left == "Atlanta", lat_left , lat_right))
View(pp_atl_s)
pp_atl <- pp_data %>%
filter(place_name_right == "Atlanta" | place_name_left == "Atlanta")
pp_atl_s <- pp_atl %>%
filter(study_question == "safer")
#create dataset of votes in which both images are from Atlanta
pp_atl_s_dup  <- pp_atl_s %>%
filter(place_name_right == "Atlanta" & place_name_left == "Atlanta")
#print the count as a result
pp_atl_s_dup %>%
summarize(count = n())
# duplicate new dataset
pp_atl_s_dup2 <- pp_atl_s_dup
# delete duplicated from main dataset
pp_atl_s <- pp_atl_s %>%
anti_join(x = pp_atl_s, y = pp_atl_s_dup, by = "X")
pp_atl_s <- pp_atl_s %>%
mutate(long_Atl = if_else(place_name_left == "Atlanta", long_left, long_right),
lat_Atl  = if_else(place_name_left == "Atlanta", lat_left , lat_right))
pp_atl_s_dup$long_Atl <- pp_atl_s_dup$long_left
pp_atl_s_dup$lat_Atl  <- pp_atl_s_dup$lat_left
pp_atl_s_dup2$long_Atl <- pp_atl_s_dup2$long_right
pp_atl_s_dup2$lat_Atl  <- pp_atl_s_dup2$lat_right
pp_atl_s$win[pp_atl_s$place_name_left  == "Atlanta" & pp_atl_s$choice == "left"]  <- 1
pp_atl_s$win[pp_atl_s$place_name_left  == "Atlanta" & pp_atl_s$choice == "right"] <- 0
pp_atl_s$win[pp_atl_s$place_name_left  == "Atlanta" & pp_atl_s$choice == "equal"] <- 0
pp_atl_s$win[pp_atl_s$place_name_right == "Atlanta" & pp_atl_s$choice == "right"] <- 1
pp_atl_s$win[pp_atl_s$place_name_right == "Atlanta" & pp_atl_s$choice == "left"]  <- 0
pp_atl_s$win[pp_atl_s$place_name_right == "Atlanta" & pp_atl_s$choice == "equal"] <- 0
pp_atl_s_dup$win[pp_atl_s_dup$choice  == "left"]  <- 1
pp_atl_s_dup$win[pp_atl_s_dup$choice  == "right"] <- 0
pp_atl_s_dup$win[pp_atl_s_dup$choice  == "equal"] <- 0
pp_atl_s_dup2$win[pp_atl_s_dup$choice == "right"] <- 1
pp_atl_s_dup2$win[pp_atl_s_dup$choice == "left"]  <- 0
pp_atl_s_dup2$win[pp_atl_s_dup$choice == "equal"] <- 0
pp_atl_s <- rbind(pp_atl_s, pp_atl_s_dup, pp_atl_s_dup2)
points_atl_s <- st_as_sf(pp_atl_s, coords = c("lat_Atl", "long_Atl")) #geocode 'safe' votes in Atlanta
st_crs(points_atl_s) == st_crs(atl) #check if coordinate reference system is the same of both layers
st_crs(points_atl_s) <- st_crs(atl)
map <- ggplot(data = atl) + geom_sf() + theme_void() +
coord_sf(xlim = c(-84.7, -84), ylim = c(33.6, 34),
expand = FALSE) #create map
map + geom_point(data = pp_atl_s, aes(x = lat_Atl, y = long_Atl),
size = .1) #plot map with points
points_atl_s_nhood <- st_intersection(atl, points_atl_s) %>%
group_by(TRACT) %>%
summarise(winscore = mean(win, na.rm = TRUE),
num_votes = n())
st_geometry(points_atl_s_nhood) <- NULL
atl_pp_wins <- left_join(atl, points_atl_s_nhood, by = c("TRACT" = "TRACT"))
atl_pp_wins <- atl_pp_wins[!is.na(atl_pp_wins$winscore), ]
ggplot(data = atl_pp_wins) +
geom_sf(aes(fill = winscore)) +
coord_sf(xlim = c(-84.7, -84), ylim = c(33.5, 34), expand = FALSE) +
theme_void()
pp_atl_s_dup <- pp_atl_s_dup %>%
mutate(long_Atl = long_left,
lat_Atl  = lat_left)
pp_atl <- pp_data %>%
filter(place_name_right == "Atlanta" | place_name_left == "Atlanta")
pp_atl_s <- pp_atl %>%
filter(study_question == "safer")
#create dataset of votes in which both images are from Atlanta
pp_atl_s_dup  <- pp_atl_s %>%
filter(place_name_right == "Atlanta" & place_name_left == "Atlanta")
#print the count as a result
pp_atl_s_dup %>%
summarize(count = n())
# duplicate new dataset
pp_atl_s_dup2 <- pp_atl_s_dup
# delete duplicated votes from main dataset
pp_atl_s <- pp_atl_s %>%
anti_join(x = pp_atl_s, y = pp_atl_s_dup, by = "X")
pp_atl_s <- pp_atl_s %>%
mutate(long_Atl = if_else(place_name_left == "Atlanta", long_left, long_right),
lat_Atl  = if_else(place_name_left == "Atlanta", lat_left , lat_right))
pp_atl_s_dup <- pp_atl_s_dup %>%
mutate(long_Atl = long_left,
lat_Atl  = lat_left)
pp_atl_s_dup2 <- pp_atl_s_dup2 %>%
mutate(long_Atl = long_right,
lat_Atl  = lat_right)
pp_atl_s <- pp_atl_s %>%
mutate(win = replace(win, place_name_left  == "Atlanta" & choice == "left", 1),
win = replace(win, place_name_left  == "Atlanta" & choice != "left", 0),
win = replace(win,  place_name_right == "Atlanta" & choice == "right", 1,
win,  place_name_right == "Atlanta" & choice != "right", 0))
pp_atl_s <- pp_atl_s %>%
mutate(win = replace(win, place_name_left  == "Atlanta" & choice == "left", 1),
win = replace(win, place_name_left  == "Atlanta" & choice != "left", 0),
win = replace(win,  place_name_right == "Atlanta" & choice == "right", 1),
win = replace(win,  place_name_right == "Atlanta" & choice != "right", 0))
pp_atl_s <- pp_atl_s %>%
mutate(win = if_else((place_name_left == "Atlanta" & choice == "left") |
(place_name_righ == "Atlanta" & choice == "right"), 1, 0))
pp_atl_s <- pp_atl_s %>%
mutate(win = if_else((place_name_left  == "Atlanta" & choice == "left") |
(place_name_right == "Atlanta" & choice == "right"), 1, 0))
View(pp_atl_s)
pp_atl_s_dup$win[pp_atl_s_dup$choice  == "left"]  <- 1
pp_atl_s_dup$win[pp_atl_s_dup$choice  == "equal"] <- 0
pp_atl_s_dup2$win[pp_atl_s_dup$choice == "right"] <- 1
pp_atl_s_dup2$win[pp_atl_s_dup$choice == "left"]  <- 0
pp_atl_s_dup2$win[pp_atl_s_dup$choice == "equal"] <- 0
pp_atl_s <- rbind(pp_atl_s, pp_atl_s_dup, pp_atl_s_dup2)
points_atl_s <- st_as_sf(pp_atl_s, coords = c("lat_Atl", "long_Atl")) #geocode 'safe' votes in Atlanta
st_crs(points_atl_s) == st_crs(atl) #check if coordinate reference system is the same of both layers
st_crs(points_atl_s) <- st_crs(atl)
map <- ggplot(data = atl) + geom_sf() + theme_void() +
coord_sf(xlim = c(-84.7, -84), ylim = c(33.6, 34),
expand = FALSE) #create map
map + geom_point(data = pp_atl_s, aes(x = lat_Atl, y = long_Atl),
size = .1) #plot map with points
points_atl_s_nhood <- st_intersection(atl, points_atl_s) %>%
group_by(TRACT) %>%
summarise(winscore = mean(win, na.rm = TRUE),
num_votes = n())
st_geometry(points_atl_s_nhood) <- NULL
atl_pp_wins <- left_join(atl, points_atl_s_nhood, by = c("TRACT" = "TRACT"))
atl_pp_wins <- atl_pp_wins[!is.na(atl_pp_wins$winscore), ]
ggplot(data = atl_pp_wins) +
geom_sf(aes(fill = winscore)) +
coord_sf(xlim = c(-84.7, -84), ylim = c(33.5, 34), expand = FALSE) +
theme_void()
pp_atl_s_dup <- pp_atl_s_dup %>%
mutate(win = if_else(choice == "left", 1, 0))
pp_atl_s_dup2 <- pp_atl_s_dup %>%
mutate(win = if_else(choice == "right", 1, 0))
pp_atl_s <- rbind(pp_atl_s, pp_atl_s_dup, pp_atl_s_dup2)
points_atl_s <- st_as_sf(pp_atl_s, coords = c("lat_Atl", "long_Atl")) #geocode 'safe' votes in Atlanta
st_crs(points_atl_s) == st_crs(atl) #check if coordinate reference system is the same of both layers
st_crs(points_atl_s) <- st_crs(atl)
map <- ggplot(data = atl) + geom_sf() + theme_void() +
coord_sf(xlim = c(-84.7, -84), ylim = c(33.6, 34),
expand = FALSE) #create map
map + geom_point(data = pp_atl_s, aes(x = lat_Atl, y = long_Atl),
size = .1) #plot map with points
points_atl_s_nhood <- st_intersection(atl, points_atl_s) %>%
group_by(TRACT) %>%
summarise(winscore = mean(win, na.rm = TRUE),
num_votes = n())
st_geometry(points_atl_s_nhood) <- NULL
atl_pp_wins <- left_join(atl, points_atl_s_nhood, by = c("TRACT" = "TRACT"))
atl_pp_wins <- atl_pp_wins[!is.na(atl_pp_wins$winscore), ]
ggplot(data = atl_pp_wins) +
geom_sf(aes(fill = winscore)) +
coord_sf(xlim = c(-84.7, -84), ylim = c(33.5, 34), expand = FALSE) +
theme_void()
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(ggplot2)
library(sf)
library(ineq)
library(lubridate)
library(tidyr)
library(dplyr)
pp_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
pp_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
pp_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
pp_data %>%
group_by(study_question) %>% # categories based on study questions
summarize(Count = n()) %>% # count number of units in each category
arrange(desc(Count)) # reorder in descending order
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(ggplot2)
library(sf)
library(ineq)
library(lubridate)
library(tidyr)
library(dplyr)
pp_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
pp_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
pp_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
pp_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
pp_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
pp_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
pp_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
pp_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
pp_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
pp_data %>%
group_by(place_name_left) %>% # categories based on cities on the left
summarize(Count = n()) %>% # count number of units in each category
top_n(3) # print 3 most frequent categories
pp_data %>%
group_by(place_name_right) %>% # categories based on cities on the right
summarize(Count = n()) %>% # count number of units in each category
top_n(3) # print 3 most frequent categories
pp_data %>%
group_by(study_question) %>% # categories based on study questions
summarize(Count = n()) %>% # count number of units in each category
arrange(desc(Count)) # reorder in descending order
pp_data %>%
group_by(choice) %>% # categories based on vote (right, left or equal)
summarize(Count = n()) %>% # count number of units in each category
top_n(3) # print 3 most frequent categories
# select cases in which the image of the right or left is from Atlanta
pp_atl <- pp_data %>%
filter(place_name_right == "Atlanta" | place_name_left == "Atlanta")
pp_atl_s <- pp_atl %>%
filter(study_question == "safer") # select votes of 'safer'
# create dataset of votes in which both images are from Atlanta
pp_atl_s_dup  <- pp_atl_s %>%
filter(place_name_right == "Atlanta" & place_name_left == "Atlanta")
# print the count of votes as a result
pp_atl_s_dup %>%
summarize(count = n())
# duplicate the new dataset
pp_atl_s_dup2 <- pp_atl_s_dup
# delete duplicated votes from main dataset
pp_atl_s <- pp_atl_s %>%
anti_join(x = pp_atl_s, y = pp_atl_s_dup, by = "X")
# copy coordinates from left image if it is from Atlanta, otherwise copy from right image
pp_atl_s <- pp_atl_s %>%
mutate(long_Atl = if_else(place_name_left == "Atlanta", long_left, long_right),
lat_Atl  = if_else(place_name_left == "Atlanta", lat_left , lat_right))
# copy coordinates from left image to new columns
pp_atl_s_dup <- pp_atl_s_dup %>%
mutate(long_Atl = long_left,
lat_Atl  = lat_left)
# copy coordinates from right image to new columns
pp_atl_s_dup2 <- pp_atl_s_dup2 %>%
mutate(long_Atl = long_right,
lat_Atl  = lat_right)
# if left image is from Atlanta and user voted for left image, assing 1, otherwise 0
# if right image is from Atlanta and user voted for right image, assign 1, otherwise 0
pp_atl_s <- pp_atl_s %>%
mutate(win = if_else((place_name_left  == "Atlanta" & choice == "left") |
(place_name_right == "Atlanta" & choice == "right"), 1, 0))
# if participant voted for left image, assign 1, otherwise 0
pp_atl_s_dup <- pp_atl_s_dup %>%
mutate(win = if_else(choice == "left", 1, 0))
# if participant voted for righ image, assign 1, otherwise 0
pp_atl_s_dup2 <- pp_atl_s_dup %>%
mutate(win = if_else(choice == "right", 1, 0))
pp_atl_s <- rbind(pp_atl_s, pp_atl_s_dup, pp_atl_s_dup2)
atl <- st_read("http://worldmap.harvard.edu/download/wfs/1824/json?outputFormat=json&service=WFS&request=GetFeature&format_options=charset%3AUTF-8&typename=geonode%3AAtlanta_Census_Tracts_SHL&version=1.0.0")
plot(st_geometry(atl))
points_atl_s <- st_as_sf(pp_atl_s, coords = c("lat_Atl", "long_Atl")) #geocode votes
st_crs(points_atl_s) == st_crs(atl) #check if CRS is the same in both layers
st_crs(points_atl_s) <- st_crs(atl)
st_crs(points_atl_s) == st_crs(atl) #check if CRS is the same in both layers
map <- ggplot(data = atl) + geom_sf() + theme_void() +
coord_sf(xlim = c(-84.7, -84), ylim = c(33.6, 34),
expand = FALSE) #create map
map + geom_point(data = pp_atl_s, aes(x = lat_Atl, y = long_Atl),
size = .1) #plot map with points
points_atl_s_nhood <- st_intersection(atl, points_atl_s) %>%
group_by(TRACT) %>%
summarise(winscore = mean(win, na.rm = TRUE),
num_votes = n())
st_geometry(points_atl_s_nhood) <- NULL
# merge census tracts and Place Pulse votes based on 'TRACT' column
atl_pp_wins <- left_join(atl, points_atl_s_nhood, by = c("TRACT" = "TRACT"))
# delete census tracts with 0 votes (NAs)
atl_pp_wins <- atl_pp_wins[!is.na(atl_pp_wins$winscore), ]
ggplot(data = atl_pp_wins) +
geom_sf(aes(fill = winscore)) +
coord_sf(xlim = c(-84.7, -84), ylim = c(33.5, 34), expand = FALSE) +
theme_void()
summary(atl_pp_wins$winscore) # descriptive statistics: proportion 'safer' votes per tract
p <- ggplot(atl_pp_wins, aes(y = winscore))
p + geom_boxplot() + ggtitle("Boxplot of percentage of 'safer' votes per area") # boxplot
voter <- pp_data %>%
group_by(voter_uniqueid) %>%
summarise(num_votes = n())
# subset top 1% of most prolific participants
top_1percent <- subset(voter, num_votes > quantile(num_votes, prob = 1 - 1/100))
sum(top_1percent$num_votes) / sum(voter$num_votes) * 100
top_10percent <- subset(voter, num_votes > quantile(num_votes, prob = 1 - 10/100)) #subset top 10% participants
sum(top_10percent$num_votes) / sum(voter$num_votes) * 100 #Proportion of votes by top 10% participants
top_25percent <- subset(voter, num_votes > quantile(num_votes, prob = 1 - 25/100)) #subset top 25% participants
sum(top_25percent$num_votes) / sum(voter$num_votes) * 100 #Proportion of votes by top 25% participants
Gini(voter$num_votes)
plot(Lc(voter$num_votes),
xlab = "Cumulative share of participants from lowest to higher number of votes",
ylab = "Cumulative share of votes", col = "darkred", lwd = 2)
summary(atl_pp_wins$num_votes)
by_day <- pp_data %>%
mutate(day = ymd(day)) %>%
group_by(day) %>%
summarise(num_votes = n()) %>%
complete(day = seq.Date(min(day), max(day), by = "day")) %>%
mutate(num_votes = replace_na(num_votes, 0))
ggplot(by_day, aes(x = day, y = num_votes)) +
geom_line() +
geom_smooth(lwd = 1.5, col = "red") +
theme_bw() +
xlab("Days since website launch") +
ylab("Number of votes")
# download key statistics for census tracts
Migration <- read.csv("https://opendata.arcgis.com/datasets/738458ea84ae4d5ea412a843960a99b4_637.csv") #download migration data
# download key statistics for census tracts
Migration <- read.csv("https://opendata.arcgis.com/datasets/738458ea84ae4d5ea412a843960a99b4_637.csv") #download migration data
# download key statistics for census tracts
Migration <- read.csv("https://opendata.arcgis.com/datasets/738458ea84ae4d5ea412a843960a99b4_637.csv") #download migration data
# download key statistics for census tracts
Migration <- read.csv("https://opendata.arcgis.com/datasets/738458ea84ae4d5ea412a843960a99b4_637.csv") #download migration data
# download key statistics for census tracts
Migration <- read.csv("https://opendata.arcgis.com/datasets/738458ea84ae4d5ea412a843960a99b4_637.csv") #download migration data
Migration <- Migration[c("GEOID", "pMoved_e")] #select variable % Moved in the last year, 2017
Ethnicity <- read.csv("https://opendata.arcgis.com/datasets/ad1c598875644ad1b8a0397107091d1c_37.csv") #download ethnicity data
Ethnicity <- read.csv("https://opendata.arcgis.com/datasets/ad1c598875644ad1b8a0397107091d1c_37.csv") #download ethnicity data
Whites <- Ethnicity[c("GEOID", "pNHWhite_e")] #select variable % Not Hispanic, White alone, 2017
Blacks <- Ethnicity[c("GEOID", "pNHBlack_e")] #select variable % Not Hispanic, Black or African American alone, 2017
Occ_houses <- read.csv("https://opendata.arcgis.com/datasets/4692d4db01a14b92965addc80a00cd94_317.csv") #download housing data
Occ_houses <- Occ_houses[c("GEOID", "pOccHU_e")] #select variable % Occupied housing units, 2017
rent1000 <- read.csv("https://opendata.arcgis.com/datasets/db14dda46ba845e0b4081e67d647e15b_337.csv") #download rent data
rent1000 <- read.csv("https://opendata.arcgis.com/datasets/db14dda46ba845e0b4081e67d647e15b_337.csv") #download rent data
rent1000 <- rent1000[c("GEOID", "pGrent1000P_e")] #select variable % Gross rent $1,000 or more, 2017
exp_variables <- list(Migration, Whites, Blacks, Occ_houses, rent1000) %>%
reduce(left_join, by = "GEOID")
library(purrr)
exp_variables <- list(Migration, Whites, Blacks, Occ_houses, rent1000) %>%
reduce(left_join, by = "GEOID")
View(atl_pp_wins)
View(exp_variables)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(ggplot2)
library(sf)
library(ineq)
library(lubridate)
library(tidyr)
library(dplyr)
library(purrr)
# merge dependent and independent variables
atl_pp_covs <- atl_pp_wins %>%
left_join(exp_variables, by = c("FIPS", "GEOID"), all.x = TRUE)
# merge dependent and independent variables
atl_pp_covs <- atl_pp_wins %>%
left_join(exp_variables, by = c("GEOID", "FIPS"), all.x = TRUE)
# merge dependent and independent variables
atl_pp_covs <- atl_pp_wins %>%
left_join(exp_variables, by = c("FIPS" = "GEOID"), all.x = TRUE)
type(atl_pp_wins$FIPS)
class(atl_pp_wins$FIPS)
# merge dependent and independent variables
atl_pp_covs <- atl_pp_wins %>%
mutate_each_(funs(as.numeric), FIPS) %>%
left_join(exp_variables, by = c("FIPS" = "GEOID"), all.x = TRUE)
# merge dependent and independent variables
atl_pp_covs <- atl_pp_wins %>%
as_factor(FIPS) %>%
left_join(exp_variables, by = c("FIPS" = "GEOID"), all.x = TRUE)
library(forcats)
# merge dependent and independent variables
atl_pp_covs <- atl_pp_wins %>%
as_factor(FIPS) %>%
left_join(exp_variables, by = c("FIPS" = "GEOID"), all.x = TRUE)
exp_variables <- list(Migration, Whites, Blacks, Occ_houses, rent1000) %>%
reduce(left_join, by = "GEOID") %>%
as.numeric(GEOID)
exp_variables <- list(Migration, Whites, Blacks, Occ_houses, rent1000) %>%
reduce(left_join, by = "GEOID") %>%
as.numeric("GEOID")
exp_variables <- list(Migration, Whites, Blacks, Occ_houses, rent1000) %>%
reduce(left_join, by = "GEOID") %>%
as_numeric(GEOID)
class(exp_variables$GEOID)
exp_variables <- list(Migration, Whites, Blacks, Occ_houses, rent1000) %>%
reduce(left_join, by = "GEOID") %>%
as_factor(GEOID)
exp_variables <- list(Migration, Whites, Blacks, Occ_houses, rent1000) %>%
reduce(left_join, by = "GEOID") %>%
as_factor("GEOID")
class(exp_variables$GEOID)
exp_variables <- list(Migration, Whites, Blacks, Occ_houses, rent1000) %>%
reduce(left_join, by = "GEOID") %>%
lapply(GEOID, factor)
exp_variables <- list(Migration, Whites, Blacks, Occ_houses, rent1000) %>%
reduce(left_join, by = "GEOID") %>%
lapply("GEOID", factor)
exp_variables <- list(Migration, Whites, Blacks, Occ_houses, rent1000) %>%
reduce(left_join, by = "GEOID") %>%
mutate_if(GEOID, is.numeric, as.factor)
exp_variables <- list(Migration, Whites, Blacks, Occ_houses, rent1000) %>%
reduce(left_join, by = "GEOID") %>%
mutate_if("GEOID", is.numeric, as.factor)
exp_variables$GEOID <- as.numeric(exp_variables$GEOID)
# merge dependent and independent variables
atl_pp_covs <- atl_pp_wins %>%
left_join(exp_variables, by = c("FIPS" = "GEOID"), all.x = TRUE)
class(atl_pp_wins$FIPS)
class(exp_variables$GEOID)
exp_variables <- list(Migration, Whites, Blacks, Occ_houses, rent1000) %>%
reduce(left_join, by = "GEOID")
exp_variables$GEOID <- as.factor(exp_variables$GEOID)
class(atl_pp_wins$FIPS)
class(exp_variables$GEOID)
# merge dependent and independent variables
atl_pp_covs <- atl_pp_wins %>%
left_join(exp_variables, by = c("FIPS" = "GEOID"), all.x = TRUE)
#standardise all variables to facilitate interpretation of coefficients
atl_pp_covs <- atl_pp_covs %>%
mutate(Safety_s        = (winscore      - mean(winscore))      / sd(winscore)  ,
pMoved_e_s      = (pMoved_e      - mean(pMoved_e))      / sd(pMoved_e)  ,
pNHWhite_e_s    = (pNHWhite_e    - mean(pNHWhite_e))    / sd(pNHWhite_e),
pNHBlack_e_s    = (pNHBlack_e    - mean(pNHBlack_e))    / sd(pNHBlack_e),
pOccHU_e_s      = (pOccHU_e      - mean(pOccHU_e))      / sd(pOccHU_e)  ,
pGrent1000P_e_s = (pGrent1000P_e - mean(pGrent1000P_e)) / sd(pGrent1000P_e))
# fit non-spatial linear model (OLS)
model <- lm(formula = Safety_s ~ pMoved_e_s +
pNHWhite_e_s + pNHBlack_e_s + pOccHU_e_s + pGrent1000P_e_s,
data = Atlanta_map3)
# fit non-spatial linear model (OLS)
model <- lm(formula = Safety_s ~ pMoved_e_s +
pNHWhite_e_s + pNHBlack_e_s + pOccHU_e_s + pGrent1000P_e_s,
data = atl_pp_covs)
View(atl_pp_covs)
# merge dependent and independent variables
atl_pp_covs <- atl_pp_wins %>%
left_join(exp_variables, by = c("FIPS" = "GEOID"), all.x = TRUE)
View(exp_variables)
# download key statistics for census tracts
Migration <- read.csv("https://opendata.arcgis.com/datasets/738458ea84ae4d5ea412a843960a99b4_637.csv") #download migration data
# download key statistics for census tracts
Migration <- read.csv("https://opendata.arcgis.com/datasets/738458ea84ae4d5ea412a843960a99b4_637.csv") #download migration data
# download key statistics for census tracts
Migration <- read.csv("https://opendata.arcgis.com/datasets/738458ea84ae4d5ea412a843960a99b4_637.csv") #download migration data
# download key statistics for census tracts
Migration <- read.csv("https://opendata.arcgis.com/datasets/738458ea84ae4d5ea412a843960a99b4_637.csv") #download migration data
# download key statistics for census tracts
Migration <- read.csv("https://opendata.arcgis.com/datasets/738458ea84ae4d5ea412a843960a99b4_637.csv") #download migration data
# download key statistics for census tracts
Migration <- read.csv("https://opendata.arcgis.com/datasets/738458ea84ae4d5ea412a843960a99b4_637.csv") #download migration data
View(Migration)
View(atl_pp_wins)
