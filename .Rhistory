exp_variables <- list(Migration, Ethnicity, Occ_houses, rent1000, Income) %>%
reduce(left_join, by = "NAME") %>%
select(NAME, pMoved_e, pNHWhite_e, pNHBlack_e, pOccHU_e, pGrent1000P_e, pHHIncLt10k_e) %>%
mutate(NAME = gsub("(.*),.*", "\\1", NAME),
NAME = sub(".*? ", "", NAME),
NAME = sub(".*? ", "", NAME))
View(exp_variables)
View(atl_pp_wins)
# merge dependent and independent variables
atl_pp_covs <- atl_pp_wins %>%
left_join(exp_variables, by = c("TRACTID" = "NAME"))
# merge dependent and independent variables
atl_pp_covs <- atl_pp_wins %>%
left_join(exp_variables, by = c("TRACTID" = "NAME"))
View(atl_pp_covs)
View(Migration)
Migration <- Migration %>%
filter(PlanningRegion == "Atlanta Regional Commission")
Ethnicity <- Ethnicity %>%
filter(PlanningRegion == "Atlanta Regional Commission")
View(Migration)
Occ_houses <- Occ_houses %>%
filter(PlanningRegion == "Atlanta Regional Commission")
Migration <- Migration %>%
filter(PlanningRegion == "Atlanta Regional Commission")
Ethnicity <- Ethnicity %>%
filter(PlanningRegion == "Atlanta Regional Commission")
Occ_houses <- Occ_houses %>%
filter(PlanningRegion == "Atlanta Regional Commission")
rent1000 <- rent1000 %>%
filter(PlanningRegion == "Atlanta Regional Commission")
Income <- Income %>%
filter(PlanningRegion == "Atlanta Regional Commission")
exp_variables <- list(Migration, Ethnicity, Occ_houses, rent1000, Income) %>%
reduce(left_join, by = "NAME") %>%
select(NAME, pMoved_e, pNHWhite_e, pNHBlack_e, pOccHU_e, pGrent1000P_e, pHHIncLt10k_e) %>%
mutate(NAME = gsub("(.*),.*", "\\1", NAME),
NAME = sub(".*? ", "", NAME),
NAME = sub(".*? ", "", NAME))
exp_variables$GEOID <- as.vector(exp_variables$GEOID)
# merge dependent and independent variables
atl_pp_covs <- atl_pp_wins %>%
left_join(exp_variables, by = c("TRACTID" = "NAME"))
table(is.na(atl_pp_covs$pNHBlack_e))
#standardise all variables to facilitate interpretation of coefficients
atl_pp_covs <- atl_pp_covs %>%
filter(!is.na(pMoved_e)) %>%
mutate(winscore        = winscore * 100,
winscore_s      = (winscore      - mean(winscore))      / sd(winscore)  ,
pMoved_e_s      = (pMoved_e      - mean(pMoved_e))      / sd(pMoved_e)  ,
pNHWhite_e_s    = (pNHWhite_e    - mean(pNHWhite_e))    / sd(pNHWhite_e),
pNHBlack_e_s    = (pNHBlack_e    - mean(pNHBlack_e))    / sd(pNHBlack_e),
pOccHU_e_s      = (pOccHU_e      - mean(pOccHU_e))      / sd(pOccHU_e)  ,
pGrent1000P_e_s = (pGrent1000P_e - mean(pGrent1000P_e)) / sd(pGrent1000P_e),
pHHIncLt10k_e_s = (pHHIncLt10k_e - mean(pHHIncLt10k_e)) / sd(pHHIncLt10k_e))
# fit non-spatial linear model (OLS)
model <- lm(formula = winscore ~ pMoved_e +
pNHWhite_e + pNHBlack_e + pOccHU_e + pGrent1000P_e + pHHIncLt10k_e,
data = atl_pp_covs)
model <- lm(formula = winscore_s ~ pMoved_e_s +
pNHWhite_e_s + pNHBlack_e_s + pOccHU_e_s + pGrent1000P_e_s + pHHIncLt10k_e_s,
data = atl_pp_covs)
# obtain model results
summary(model)
exp_variables <- list(Migration, Ethnicity, Occ_houses, rent1000, Income) %>%
reduce(left_join, by = "GEOID") %>%
select(NAME, pMoved_e, pNHWhite_e, pNHBlack_e, pOccHU_e, pGrent1000P_e, pHHIncLt10k_e) %>%
mutate(GEOID = sub('.*(\\d{6}).*', '\\1', GEOID))
exp_variables <- list(Migration, Ethnicity, Occ_houses, rent1000, Income) %>%
reduce(left_join, by = "GEOID") %>%
select(GEOID, pMoved_e, pNHWhite_e, pNHBlack_e, pOccHU_e, pGrent1000P_e, pHHIncLt10k_e) %>%
mutate(GEOID = sub('.*(\\d{6}).*', '\\1', GEOID))
# download key statistics for census tracts
Migration <- read.csv("covariates_model/Migration_(by_Census_Tract)_2017.csv")
Ethnicity <- read.csv("covariates_model/Ethnicity_(by_Census_Tract)_2017.csv")
Occ_houses <- read.csv("covariates_model/Housing_Characteristics_(by_Census_Tract)_2017.csv")
Income <- read.csv("covariates_model/Income_by_Census_Tract_2017.csv")
exp_variables <- list(Migration, Ethnicity, Occ_houses, rent1000, Income) %>%
reduce(left_join, by = "GEOID") %>%
select(GEOID, pMoved_e, pNHWhite_e, pNHBlack_e, pOccHU_e, pGrent1000P_e, pHHIncLt10k_e) %>%
mutate(GEOID = sub('.*(\\d{6}).*', '\\1', GEOID))
exp_variables$GEOID <- as.vector(exp_variables$GEOID)
# merge dependent and independent variables
atl_pp_covs <- atl_pp_wins %>%
mutate(GEOID = sub('.*(\\d{6}).*', '\\1', STFID)) %>%
left_join(exp_variables, by = GEOID)
rent1000 <- read.csv("covariates_model/Gross_Rent_(by_Census_Tract)_2017.csv")
exp_variables <- list(Migration, Ethnicity, Occ_houses, rent1000, Income) %>%
reduce(left_join, by = "GEOID") %>%
select(GEOID, pMoved_e, pNHWhite_e, pNHBlack_e, pOccHU_e, pGrent1000P_e, pHHIncLt10k_e) %>%
mutate(GEOID = sub('.*(\\d{6}).*', '\\1', GEOID))
# merge dependent and independent variables
atl_pp_covs <- atl_pp_wins %>%
mutate(GEOID = sub('.*(\\d{6}).*', '\\1', STFID)) %>%
left_join(exp_variables, by = c("TRACTID" = "NAME"))
# merge dependent and independent variables
atl_pp_covs <- atl_pp_wins %>%
mutate(GEOID = sub('.*(\\d{6}).*', '\\1', STFID)) %>%
left_join(exp_variables, by = c("GEOID" = "GEOID"))
View(atl_pp_covs)
# merge dependent and independent variables
atl_pp_covs <- atl_pp_wins %>%
mutate(GEOID = sub('.*(\\d{6}).*', '\\1', STFID))
Migration <- Migration %>%
filter(PlanningRegion == "Atlanta Regional Commission")
Ethnicity <- Ethnicity %>%
filter(PlanningRegion == "Atlanta Regional Commission")
rent1000 <- rent1000 %>%
filter(PlanningRegion == "Atlanta Regional Commission")
Income <- Income %>%
filter(PlanningRegion == "Atlanta Regional Commission")
exp_variables <- list(Migration, Ethnicity, Occ_houses, rent1000, Income) %>%
reduce(left_join, by = "GEOID") %>%
select(GEOID, pMoved_e, pNHWhite_e, pNHBlack_e, pOccHU_e, pGrent1000P_e, pHHIncLt10k_e) %>%
mutate(GEOID = sub('.*(\\d{6}).*', '\\1', GEOID))
exp_variables$GEOID <- as.vector(exp_variables$GEOID)
# merge dependent and independent variables
atl_pp_covs <- atl_pp_wins %>%
mutate(GEOID = sub('.*(\\d{6}).*', '\\1', STFID)) %>%
left_join(exp_variables, by = c("GEOID" = "GEOID"))
View(atl_pp_covs)
table(is.na(atl_pp_covs$pNHBlack_e))
#standardise all variables to facilitate interpretation of coefficients
atl_pp_covs <- atl_pp_covs %>%
filter(!is.na(pMoved_e)) %>%
mutate(winscore        = winscore * 100,
winscore_s      = (winscore      - mean(winscore))      / sd(winscore)  ,
pMoved_e_s      = (pMoved_e      - mean(pMoved_e))      / sd(pMoved_e)  ,
pNHWhite_e_s    = (pNHWhite_e    - mean(pNHWhite_e))    / sd(pNHWhite_e),
pNHBlack_e_s    = (pNHBlack_e    - mean(pNHBlack_e))    / sd(pNHBlack_e),
pOccHU_e_s      = (pOccHU_e      - mean(pOccHU_e))      / sd(pOccHU_e)  ,
pGrent1000P_e_s = (pGrent1000P_e - mean(pGrent1000P_e)) / sd(pGrent1000P_e),
pHHIncLt10k_e_s = (pHHIncLt10k_e - mean(pHHIncLt10k_e)) / sd(pHHIncLt10k_e))
# fit non-spatial linear model (OLS)
model <- lm(formula = winscore ~ pMoved_e +
pNHWhite_e + pNHBlack_e + pOccHU_e + pGrent1000P_e + pHHIncLt10k_e,
data = atl_pp_covs)
# obtain model results
summary(model)
View(Ethnicity)
Foreign <- read.csv("covariates_model/Foreign_Born_by_Census_Tract_2017.csv")
Foreign <- Foreign %>%
filter(PlanningRegion == "Atlanta Regional Commission")
View(Foreign)
View(rent1000)
View(Income)
View(Occ_houses)
View(rent1000)
exp_variables <- list(Migration, Ethnicity, Occ_houses, rent1000, Income, Foreign) %>%
reduce(left_join, by = "GEOID") %>%
select(GEOID, pMoved_e, pNHWhite_e, pNHBlack_e, pOccHU_e, pGrentLt500_e, aMeanHHIncome_e, pBornUS_e) %>%
mutate(GEOID = sub('.*(\\d{6}).*', '\\1', GEOID))
View(exp_variables)
exp_variables$GEOID <- as.vector(exp_variables$GEOID)
# merge dependent and independent variables
atl_pp_covs <- atl_pp_wins %>%
mutate(GEOID = sub('.*(\\d{6}).*', '\\1', STFID)) %>%
left_join(exp_variables, by = c("GEOID" = "GEOID"))
table(is.na(atl_pp_covs$pNHBlack_e))
# fit non-spatial linear model (OLS)
model <- lm(formula = winscore ~ pMoved_e +
pNHWhite_e + pNHBlack_e + pOccHU_e + pGrentLt500_e + aMeanHHIncome_e + pBornUS_e,
data = atl_pp_covs)
# obtain model results
summary(model)
# fit non-spatial linear model (OLS)
model <- lm(formula = winscore ~
pNHWhite_e + pNHBlack_e + pOccHU_e + pGrentLt500_e + aMeanHHIncome_e + pBornUS_e,
data = atl_pp_covs)
# obtain model results
summary(model)
# fit non-spatial linear model (OLS)
model <- lm(formula = winscore ~
pNHWhite_e + pNHBlack_e + pGrentLt500_e + aMeanHHIncome_e + pBornUS_e,
data = atl_pp_covs)
# obtain model results
summary(model)
View(Ethnicity)
exp_variables <- list(Migration, Ethnicity, Occ_houses, rent1000, Income, Foreign) %>%
reduce(left_join, by = "GEOID") %>%
select(GEOID, pMoved_e, pNHWhite_e, pNHBlack_e, pHisp_e, pOccHU_e, pGrentLt500_e, aMeanHHIncome_e, pBornUS_e) %>%
mutate(GEOID = sub('.*(\\d{6}).*', '\\1', GEOID))
exp_variables$GEOID <- as.vector(exp_variables$GEOID)
# merge dependent and independent variables
atl_pp_covs <- atl_pp_wins %>%
mutate(GEOID = sub('.*(\\d{6}).*', '\\1', STFID)) %>%
left_join(exp_variables, by = c("GEOID" = "GEOID"))
table(is.na(atl_pp_covs$pNHBlack_e))
# fit non-spatial linear model (OLS)
model <- lm(formula = winscore ~
pNHWhite_e + pNHBlack_e + pHisp_e + pGrentLt500_e + aMeanHHIncome_e + pBornUS_e,
data = atl_pp_covs)
# obtain model results
summary(model)
# fit non-spatial linear model (OLS)
model <- lm(formula = winscore ~
pNHWhite_e + pGrentLt500_e + aMeanHHIncome_e + pBornUS_e,
data = atl_pp_covs)
# obtain model results
summary(model)
# fit non-spatial linear model (OLS)
model <- lm(formula = winscore ~
pNHWhite_e + pNHBlack_e_s + pGrentLt500_e + aMeanHHIncome_e + pBornUS_e,
data = atl_pp_covs)
# fit non-spatial linear model (OLS)
model <- lm(formula = winscore ~
pNHWhite_e + pNHBlack_e + pGrentLt500_e + aMeanHHIncome_e + pBornUS_e,
data = atl_pp_covs)
# obtain model results
summary(model)
atl <- st_read("http://worldmap.harvard.edu/download/wfs/1824/json?outputFormat=json&service=WFS&request=GetFeature&format_options=charset%3AUTF-8&typename=geonode%3AAtlanta_Census_Tracts_SHL&version=1.0.0")
plot(st_geometry(atl))
points_atl_s <- st_as_sf(pp_atl_s, coords = c("lat_Atl", "long_Atl")) #geocode votes
st_crs(points_atl_s) == st_crs(atl) #check if CRS is the same in both layers
st_crs(points_atl_s) <- st_crs(atl)
st_crs(points_atl_s) == st_crs(atl) #check if CRS is the same in both layers
map <- ggplot(data = atl) + geom_sf() + theme_void() +
coord_sf(xlim = c(-84.7, -84), ylim = c(33.6, 34),
expand = FALSE) #create map
map + ggtitle("Crowdsourced votes of safety in Atlanta") +
geom_point(data = pp_atl_s, aes(x = lat_Atl, y = long_Atl),
size = .1) #plot map with points
points_atl_s_nhood <- st_intersection(atl, points_atl_s) %>%
group_by(TRACT) %>%
summarise(winscore = mean(win, na.rm = TRUE),
num_votes = n())
st_geometry(points_atl_s_nhood) <- NULL
# merge census tracts and Place Pulse votes based on 'TRACT' column
atl_pp_wins <- left_join(atl, points_atl_s_nhood, by = c("TRACT" = "TRACT"))
# delete census tracts with 0 votes (NAs)
atl_pp_wins <- atl_pp_wins[!is.na(atl_pp_wins$winscore), ]
ggplot(data = atl_pp_wins) +
ggtitle("Proportion of 'safer' votes per census tract") +
geom_sf(aes(fill = winscore)) +
coord_sf(xlim = c(-84.7, -84), ylim = c(33.5, 34), expand = FALSE) +
theme_void()
summary(atl_pp_wins$winscore) # descriptive statistics: proportion 'safer' votes per tract
p <- ggplot(atl_pp_wins, aes(y = winscore))
p + geom_boxplot() + ggtitle("Boxplot of proportion of 'safer' votes per area") # boxplot
View(atl_pp_wins)
# calculate percentages
atl_pp_wins <- atl_pp_wins %>%
mutate(p_white = WHITE    / POP2000,
p_black = BLACK    / POP2000,
p_hisp  = HISPANIC / POP2000,
m_age   = MED_AGE,
a_hh_s  = AVE_HH_SZ)
Income <- read.csv("covariates_model/Income_by_Census_Tract_2017.csv")
Income <- Income %>%
filter(PlanningRegion == "Atlanta Regional Commission")
Income <- Income %>%
select(GEOID, aMeanHHIncome_e) %>%
mutate(GEOID = sub('.*(\\d{6}).*', '\\1', GEOID))
View(Income)
exp_variables$GEOID <- as.vector(exp_variables$GEOID)
# merge dependent and independent variables
atl_pp_covs <- atl_pp_wins %>%
mutate(GEOID = sub('.*(\\d{6}).*', '\\1', STFID)) %>%
left_join(Income, by = c("GEOID" = "GEOID"))
# merge dependent and independent variables
atl_pp_covs <- atl_pp_wins %>%
mutate(GEOID = sub('.*(\\d{6}).*', '\\1', FIPS)) %>%
left_join(Income, by = c("GEOID" = "GEOID"))
View(atl_pp_covs)
# fit non-spatial linear model (OLS)
model <- lm(formula = winscore ~
p_black + p_white + p_hip + m_age + a_hh_s + aMeanHHIncome_e,
data = atl_pp_covs)
# fit non-spatial linear model (OLS)
model <- lm(formula = winscore ~
p_black + p_white + p_hisp + m_age + a_hh_s + aMeanHHIncome_e,
data = atl_pp_covs)
# obtain model results
summary(model)
exp_variables <- list(Income, Ethnicity) %>%
reduce(left_join, by = "GEOID") %>%
select(GEOID, pNHWhite_e, aMeanHHIncome_e) %>%
mutate(GEOID = sub('.*(\\d{6}).*', '\\1', GEOID))
Income <- Income %>%
filter(PlanningRegion == "Atlanta Regional Commission")
# download key statistics for census tracts
Migration <- read.csv("covariates_model/Migration_(by_Census_Tract)_2017.csv")
Occ_houses <- read.csv("covariates_model/Housing_Characteristics_(by_Census_Tract)_2017.csv")
Occ_houses <- read.csv("covariates_model/Housing_Characteristics_(by_Census_Tract)_2017.csv")
rent1000 <- read.csv("covariates_model/Gross_Rent_(by_Census_Tract)_2017.csv")
Occ_houses <- read.csv("covariates_model/Housing_Characteristics_(by_Census_Tract)_2017.csv")
rent1000 <- read.csv("covariates_model/Gross_Rent_(by_Census_Tract)_2017.csv")
Income <- read.csv("covariates_model/Income_by_Census_Tract_2017.csv")
Income <- read.csv("covariates_model/Income_by_Census_Tract_2017.csv")
Foreign <- read.csv("covariates_model/Foreign_Born_by_Census_Tract_2017.csv")
Income <- read.csv("covariates_model/Income_by_Census_Tract_2017.csv")
Foreign <- read.csv("covariates_model/Foreign_Born_by_Census_Tract_2017.csv")
Migration <- Migration %>%
filter(PlanningRegion == "Atlanta Regional Commission")
Migration <- Migration %>%
filter(PlanningRegion == "Atlanta Regional Commission")
Ethnicity <- Ethnicity %>%
filter(PlanningRegion == "Atlanta Regional Commission")
Ethnicity <- Ethnicity %>%
filter(PlanningRegion == "Atlanta Regional Commission")
Occ_houses <- Occ_houses %>%
filter(PlanningRegion == "Atlanta Regional Commission")
Ethnicity <- Ethnicity %>%
filter(PlanningRegion == "Atlanta Regional Commission")
Occ_houses <- Occ_houses %>%
filter(PlanningRegion == "Atlanta Regional Commission")
rent1000 <- rent1000 %>%
filter(PlanningRegion == "Atlanta Regional Commission")
Migration <- Migration %>%
filter(PlanningRegion == "Atlanta Regional Commission")
Ethnicity <- Ethnicity %>%
filter(PlanningRegion == "Atlanta Regional Commission")
Occ_houses <- Occ_houses %>%
filter(PlanningRegion == "Atlanta Regional Commission")
rent1000 <- rent1000 %>%
filter(PlanningRegion == "Atlanta Regional Commission")
Income <- Income %>%
filter(PlanningRegion == "Atlanta Regional Commission")
Income <- read.csv("covariates_model/Income_by_Census_Tract_2017.csv")
Foreign <- read.csv("covariates_model/Foreign_Born_by_Census_Tract_2017.csv")
Migration <- Migration %>%
filter(PlanningRegion == "Atlanta Regional Commission")
Ethnicity <- Ethnicity %>%
filter(PlanningRegion == "Atlanta Regional Commission")
Occ_houses <- Occ_houses %>%
filter(PlanningRegion == "Atlanta Regional Commission")
rent1000 <- rent1000 %>%
filter(PlanningRegion == "Atlanta Regional Commission")
Income <- Income %>%
filter(PlanningRegion == "Atlanta Regional Commission")
Foreign <- Foreign %>%
filter(PlanningRegion == "Atlanta Regional Commission")
exp_variables <- list(Income, Ethnicity) %>%
reduce(left_join, by = "GEOID") %>%
select(GEOID, pNHWhite_e, aMeanHHIncome_e) %>%
mutate(GEOID = sub('.*(\\d{6}).*', '\\1', GEOID))
# merge dependent and independent variables
atl_pp_covs <- atl_pp_wins %>%
mutate(GEOID = sub('.*(\\d{6}).*', '\\1', FIPS)) %>%
left_join(exp_variables, by = c("GEOID" = "GEOID"))
model <- lm(formula = winscore_s ~
pNHWhite_e_s + pHHIncLt10k_e_s,
data = atl_pp_covs)
model <- lm(formula = winscore ~
pNHWhite_e + aMeanHHIncome_e,
data = atl_pp_covs)
# obtain model results
summary(model)
Crimes <- read.csv("covariates_model/COBRA-2009-2019.csv")
View(Crimes)
Crimes[Crimes$Occur.Date %like% "2017", ]
Crimes %>%
filter(str_detect(Occur.Date, "2017"))
library(stringr)
Crimes %>%
filter(str_detect(Occur.Date, "2017"))
Crimes <- Crimes %>%
filter(str_detect(Occur.Date, "2017"))
CRS(atl_pp_wins)
CRS(atl)
st_crs(atl_pp_wins)
Crimes <- st_as_sf(Crimes, coords = c(x = "Longitude", y = "Latitude"), crs = st_crs(atl_pp_wins)))
Crimes <- st_as_sf(Crimes, coords = c(x = "Longitude", y = "Latitude"), crs = st_crs(atl_pp_wins))
crimes_add <- atl_pp_wins %>%
mutate(count = length(st_intersects(atl_pp_wins, Crimes)))
View(crimes_add)
st_crs(atl_pp_wins)
Crimes <- st_as_sf(Crimes, coords = c(x = "Longitude", y = "Latitude"), crs = 4326)
crimes_add <- atl_pp_wins %>%
mutate(count = length(st_intersects(atl_pp_wins, Crimes)))
crimes_add <- atl_pp_wins %>%
mutate(count = length(over(atl_pp_wins, Crimes))
ward_agg_list <- ward_sf %>% mutate(count = lengths(st_intersects(ward_sf, x))))
crimes_add <- atl_pp_wins %>%
mutate(count = length(over(atl_pp_wins, Crimes))
ward_agg_list <- ward_sf %>% mutate(count = lengths(st_intersects(ward_sf, x))))
crimes_add <- atl_pp_wins %>%
mutate(count = length(over(atl_pp_wins, Crimes)))
crimes_add <- atl_pp_wins %>%
mutate(count = length(st_intersects(atl_pp_wins, Crimes)))
Crimes <- st_as_sf(Crimes, coords = c("Latitude", "Longitude"), crs = 4326)
crimes_add <- atl_pp_wins %>%
mutate(count = length(st_intersects(atl_pp_wins, Crimes)))
View(crimes_add)
st_crs(atl_pp_wins) == st_crs(Crimes)
mutate(count = length(st_intersects(atl_pp_wins, Crimes)))
st_intersects(atl_pp_wins, Crimes)
crimes_add <- atl_pp_wins %>%
mutate(count = st_intersects(atl_pp_wins, Crimes))
View(crimes_add)
inter <- st_intersects(atl_pp_wins, Crimes)
View(inter)
inter <- length(st_intersects(atl_pp_wins, Crimes))
inter <- st_intersects(atl_pp_wins, Crimes)
View(inter)
inter <- lengths(st_intersects(atl_pp_wins, Crimes))
crimes_add <- atl_pp_wins %>%
mutate(count = lengths(st_intersects(atl_pp_wins, Crimes)))
View(crimes_add)
atl_pp_wins <- atl_pp_wins %>%
mutate(count = lengths(st_intersects(atl_pp_wins, Crimes)))
atl_pp_wins <- atl_pp_wins %>%
mutate(count   = lengths(st_intersects(atl_pp_wins, Crimes)),
crime_r = count / POP2010 * 1000)
View(atl_pp_wins)
atl_pp_wins <- atl_pp_wins %>%
mutate(count   = lengths(st_intersects(atl_pp_wins, Crimes)),
crime_r = count / POP2010 * 100)
exp_variables <- list(Income, Ethnicity) %>%
reduce(left_join, by = "GEOID") %>%
select(GEOID, pNHWhite_e, aMeanHHIncome_e) %>%
mutate(GEOID = sub('.*(\\d{6}).*', '\\1', GEOID))
exp_variables$GEOID <- as.vector(exp_variables$GEOID)
# merge dependent and independent variables
atl_pp_covs <- atl_pp_wins %>%
mutate(GEOID = sub('.*(\\d{6}).*', '\\1', FIPS)) %>%
left_join(exp_variables, by = c("GEOID" = "GEOID"))
model <- lm(formula = winscore ~
pNHWhite_e + aMeanHHIncome_e + crime_r,
data = atl_pp_covs)
# obtain model results
summary(model)
model <- lm(formula = winscore ~
pNHWhite_e + aMeanHHIncome_e + count,
data = atl_pp_covs)
# obtain model results
summary(model)
model <- lm(formula = winscore ~
pNHWhite_e + aMeanHHIncome_e + rank(count),
data = atl_pp_covs)
# obtain model results
summary(model)
library(spdep)
nb <- poly2nb(atl_pp_covs, queen = TRUE) #compute neighbors list based on 'Queen' contiguity approach
prox <- nb2listw(nb, style = "W", zero.policy = TRUE) #compute proximity matrix (all neighbours have equal weights)
model.lag <- spatialreg::lagsarlm(formula = winscore_s ~ pNHWhite_e + aMeanHHIncome_e + rank(count),
data = atl_pp_covs, prox, zero.policy = T)
model.lag <- spatialreg::lagsarlm(formula = winscore ~ pNHWhite_e + aMeanHHIncome_e + rank(count),
data = atl_pp_covs, prox, zero.policy = T)
# obtain model results
summary(model.lag)
model.lag <- spatialreg::lagsarlm(formula = winscore ~ pNHWhite_e + aMeanHHIncome_e + count,
data = atl_pp_covs, prox, zero.policy = T)
# obtain model results
summary(model.lag)
model.lag <- spatialreg::lagsarlm(formula = winscore ~ pNHWhite_e + aMeanHHIncome_e + crime_r,
data = atl_pp_covs, prox, zero.policy = T)
# obtain model results
summary(model.lag)
model.lag <- spatialreg::lagsarlm(formula = winscore ~ rank(pNHWhite_e) + rank(aMeanHHIncome_e) + rank(crime),
data = atl_pp_covs, prox, zero.policy = T)
model.lag <- spatialreg::lagsarlm(formula = winscore ~ rank(pNHWhite_e) + rank(aMeanHHIncome_e) + rank(count),
data = atl_pp_covs, prox, zero.policy = T)
# obtain model results
summary(model.lag)
model.lag <- spatialreg::lagsarlm(formula = winscore ~ pNHWhite_e + aMeanHHIncome_e + count,
data = atl_pp_covs, prox, zero.policy = T)
# obtain model results
summary(model.lag)
# fit spatial error model
model.error <- spatialreg::errorsarlm(formula =  winscore ~ pNHWhite_e + aMeanHHIncome_e + count,
data = atl_pp_covs, prox, zero.policy = T)
# obtain model results
summary(model.error)
Crimes <- read.csv("covariates_model/COBRA-2009-2019.csv")
Crimes <- Crimes %>%
filter(str_detect(Occur.Date, "2015"))
Crimes <- st_as_sf(Crimes, coords = c("Latitude", "Longitude"), crs = 4326)
atl_pp_wins <- atl_pp_wins %>%
mutate(count   = lengths(st_intersects(atl_pp_wins, Crimes)),
crime_r = count / POP2010 * 100)
exp_variables <- list(Income, Ethnicity) %>%
reduce(left_join, by = "GEOID") %>%
select(GEOID, pNHWhite_e, aMeanHHIncome_e) %>%
mutate(GEOID = sub('.*(\\d{6}).*', '\\1', GEOID))
exp_variables$GEOID <- as.vector(exp_variables$GEOID)
# merge dependent and independent variables
atl_pp_covs <- atl_pp_wins %>%
mutate(GEOID = sub('.*(\\d{6}).*', '\\1', FIPS)) %>%
left_join(exp_variables, by = c("GEOID" = "GEOID"))
model <- lm(formula = winscore ~
pNHWhite_e + aMeanHHIncome_e + count,
data = atl_pp_covs)
# obtain model results
summary(model)
Crimes <- st_as_sf(Crimes, coords = c("Latitude", "Longitude"), crs = 4326)
atl_pp_wins <- atl_pp_wins %>%
mutate(count   = lengths(st_intersects(atl_pp_wins, Crimes)),
crime_r = count / POP2010 * 100)
Crimes <- read.csv("covariates_model/COBRA-2009-2019.csv")
library(stringr)
Crimes <- Crimes %>%
filter(str_detect(Occur.Date, "2017"))
Crimes <- st_as_sf(Crimes, coords = c("Latitude", "Longitude"), crs = 4326)
atl_pp_wins <- atl_pp_wins %>%
mutate(count   = lengths(st_intersects(atl_pp_wins, Crimes)),
crime_r = count / POP2010 * 100)
View(atl_pp_wins)
Crimes <- read.csv("covariates_model/COBRA-2009-2019.csv")
Crimes <- Crimes %>%
filter(str_detect(Occur.Date, "2017"))
Crimes <- st_as_sf(Crimes, coords = c("Latitude", "Longitude"), crs = 4326)
atl_pp_wins <- atl_pp_wins %>%
mutate(count   = lengths(st_intersects(atl_pp_wins, Crimes)),
crime_r = count / POP2010 * 100)
View(atl_pp_wins)
st_intersects(atl_pp_wins, Crimes)
Crimes <- read.csv("covariates_model/COBRA-2009-2019.csv")
Crimes <- Crimes %>%
filter(str_detect(Occur.Date, "2017"))
Crimes <- st_as_sf(Crimes, coords = c(y = "Latitude", x = "Longitude"), crs = 4326)
st_intersects(atl_pp_wins, Crimes)
