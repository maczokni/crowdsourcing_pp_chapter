atl <- geojson_read("https://github.com/maczokni/crowdsourcing_pp_chapter/blob/master/geojson/Census_2000_Tracts_Atlanta_Region.geojson",
what = "sp")
atl <- geojson_read("https://opendata.arcgis.com/datasets/04b79404794f43959cda4f8c3f1817e6_49.geojson",  what = "sp")
atl <- geojson_read("https://github.com/maczokni/crowdsourcing_pp_chapter/blob/master/geojson/Census_2000_Tracts_Atlanta_Region.geojson",
what = "sp")
atl <- geojson_read("https://opendata.arcgis.com/datasets/04b79404794f43959cda4f8c3f1817e6_49.geojson",  what = "sp")
atl <- geojson_read("https://github.com/maczokni/crowdsourcing_pp_chapter/blob/master/geojson/Census_2000_Tracts_Atlanta_Region.geojson",
what = "sp")
atl <- geojson_read("https://github.com/maczokni/crowdsourcing_pp_chapter/blob/master/geojson/Census_2000_Tracts_Atlanta_Region.geojson",
what = "sp")
atl <- geojson_read("https://opendata.arcgis.com/datasets/04b79404794f43959cda4f8c3f1817e6_49.geojson",  what = "sp")
atl <- geojson_read("https://github.com/maczokni/crowdsourcing_pp_chapter/blob/master/geojson/Census_2000_Tracts_Atlanta_Region.geojson",
what = "sp")
atl <- geojson_read("https://github.com/maczokni/crowdsourcing_pp_chapter/blob/master/geojson/Census_2000_Tracts_Atlanta_Region.geojson",
what = "sp")
atl <- geojson_read("https://github.com/maczokni/crowdsourcing_pp_chapter/blob/master/geojson/Census_2000_Tracts_Atlanta_Region.geojson",
what = "sp")
atl <- geojson_read("https://opendata.arcgis.com/datasets/04b79404794f43959cda4f8c3f1817e6_49.geojson",  what = "sp")
atl <- geojson_read("https://github.com/maczokni/crowdsourcing_pp_chapter/blob/master/geojson/Census_2000_Tracts_Atlanta_Region.geojson",
what = "sp")
atl <- geojson_read("https://github.com/maczokni/crowdsourcing_pp_chapter/raw/master/geojson/Census_2000_Tracts_Atlanta_Region.geojson",
what = "sp")
atl <- geojson_read("https://github.com/maczokni/crowdsourcing_pp_chapter/raw/master/geojson/Census_2000_Tracts_Atlanta_Region.geojson",
what = "sp")
atl <- geojson_read("https://github.com/maczokni/crowdsourcing_pp_chapter/raw/master/geojson/Census_2000_Tracts_Atlanta_Region.geojson",
what = "sp")
atl <- geojson_read("https://github.com/maczokni/crowdsourcing_pp_chapter/raw/master/geojson/Census_2000_Tracts_Atlanta_Region.geojson",
what = "sp")
atl <- st_read("http://worldmap.harvard.edu/download/wfs/1824/json?outputFormat=json&service=WFS&request=GetFeature&format_options=charset%3AUTF-8&typename=geonode%3AAtlanta_Census_Tracts_SHL&version=1.0.0")
atl <- st_read("http://worldmap.harvard.edu/download/wfs/1824/json?outputFormat=json&service=WFS&request=GetFeature&format_options=charset%3AUTF-8&typename=geonode%3AAtlanta_Census_Tracts_SHL&version=1.0.0")
rm(list = ls())
pp_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
pp_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
pp_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
atl <- st_read("http://worldmap.harvard.edu/download/wfs/1824/json?outputFormat=json&service=WFS&request=GetFeature&format_options=charset%3AUTF-8&typename=geonode%3AAtlanta_Census_Tracts_SHL&version=1.0.0")
if (exists("atl")){
print("Shapefile successfully downloaded from Worldmap")
} else {
library(geojsonio) #load 'geojsonio' package
# download from Association of Regional Commissions open data platform.
atl <- geojson_read("https://opendata.arcgis.com/datasets/04b79404794f43959cda4f8c3f1817e6_49.geojson",  what = "sp")
if (exist("atl")) {
print("Shapefile successfully downloaded from Association of Regional Commissions open data")
} else {
# download from Github
atl <- geojson_read("https://github.com/maczokni/crowdsourcing_pp_chapter/raw/master/geojson/Census_2000_Tracts_Atlanta_Region.geojson",
what = "sp")
}}
atl <- geojson_read("https://opendata.arcgis.com/datasets/04b79404794f43959cda4f8c3f1817e6_49.geojson",  what = "sp")
atl <- geojson_read("https://opendata.arcgis.com/datasets/04b79404794f43959cda4f8c3f1817e6_49.geojson",  what = "sp")
atl <- geojson_read("https://opendata.arcgis.com/datasets/04b79404794f43959cda4f8c3f1817e6_49.geojson",  what = "sp")
atl <- geojson_read("https://opendata.arcgis.com/datasets/04b79404794f43959cda4f8c3f1817e6_49.geojson",  what = "sp")
atl <- geojson_read("https://github.com/maczokni/crowdsourcing_pp_chapter/raw/master/geojson/Census_2000_Tracts_Atlanta_Region.geojson",
what = "sp")
atl <- geojson_read("https://github.com/maczokni/crowdsourcing_pp_chapter/raw/master/geojson/Census_2000_Tracts_Atlanta_Region.geojson",
what = "sp")
atl <- geojson_read("https://github.com/maczokni/crowdsourcing_pp_chapter/raw/master/geojson/Census_2000_Tracts_Atlanta_Region.geojson",
what = "sp")
atl <- geojson_sp("https://opendata.arcgis.com/datasets/04b79404794f43959cda4f8c3f1817e6_49.geojson")
# download geojson from Association of Regional Commissions open data platform.
atl <- geojson_sp("https://opendata.arcgis.com/datasets/04b79404794f43959cda4f8c3f1817e6_49.geojson")
atl <- st_read("http://worldmap.harvard.edu/download/wfs/1824/json?outputFormat=json&service=WFS&request=GetFeature&format_options=charset%3AUTF-8&typename=geonode%3AAtlanta_Census_Tracts_SHL&version=1.0.0")
# download geojson from Association of Regional Commissions open data platform.
atl <- geojson_sp("https://opendata.arcgis.com/datasets/04b79404794f43959cda4f8c3f1817e6_49.geojson")
# select cases in which the image of the right or left is from Atlanta
pp_atl <- pp_data %>%
filter(place_name_right == "Atlanta" | place_name_left == "Atlanta")
pp_atl_s <- pp_atl %>%
filter(study_question == "safer") # select votes of 'safer'
# create dataset in which both images are from Atlanta
pp_atl_s_dup  <- pp_atl_s %>%
filter(place_name_right == "Atlanta" & place_name_left == "Atlanta")
# duplicate the new dataset
pp_atl_s_dup2 <- pp_atl_s_dup
# delete duplicated votes from main dataset
pp_atl_s <- pp_atl_s %>%
anti_join(x = pp_atl_s, y = pp_atl_s_dup, by = "X")
# copy coordinates from left image if it is from Atlanta, otherwise copy from right image
pp_atl_s <- pp_atl_s %>%
mutate(long_Atl = if_else(place_name_left == "Atlanta", long_left, long_right),
lat_Atl  = if_else(place_name_left == "Atlanta", lat_left , lat_right))
# copy coordinates from left image
pp_atl_s_dup <- pp_atl_s_dup %>%
mutate(long_Atl = long_left,
lat_Atl  = lat_left)
# copy coordinates from right image
pp_atl_s_dup2 <- pp_atl_s_dup2 %>%
mutate(long_Atl = long_right,
lat_Atl  = lat_right)
# if left image is from Atlanta and user voted for left image as 'safer', assing 1, otherwise 0
# if right image is from Atlanta and user voted for right image as 'safer', assign 1, otherwise 0
pp_atl_s <- pp_atl_s %>%
mutate(win = if_else((place_name_left  == "Atlanta" & choice == "left") |
(place_name_right == "Atlanta" & choice == "right"), 1, 0))
# if participant voted for left image as 'safer', assign 1, otherwise 0
pp_atl_s_dup <- pp_atl_s_dup %>%
mutate(win = if_else(choice == "left", 1, 0))
# if participant voted for righ image as 'safer', assign 1, otherwise 0
pp_atl_s_dup2 <- pp_atl_s_dup %>%
mutate(win = if_else(choice == "right", 1, 0))
pp_atl_s <- rbind(pp_atl_s, pp_atl_s_dup, pp_atl_s_dup2)
# convert sp file into st
atl <- st_as_sf(atl)
plot(st_geometry(atl))
points_atl_s <- st_as_sf(pp_atl_s, coords = c("lat_Atl", "long_Atl")) #geocode votes
st_crs(points_atl_s) == st_crs(atl) #check if CRS is the same in both layers
st_crs(points_atl_s) <- st_crs(atl)
st_crs(points_atl_s) == st_crs(atl) #check if CRS is the same in both layers
map <- ggplot(data = atl) + geom_sf() + theme_void() +
coord_sf(xlim = c(-84.7, -84), ylim = c(33.6, 34),
expand = FALSE) #create map
map + ggtitle("Crowdsourced votes of safety in Atlanta") +
geom_point(data = pp_atl_s, aes(x = lat_Atl, y = long_Atl),
size = .1) #plot map with points
points_atl_s_nhood <- st_intersection(atl, points_atl_s) %>%
group_by(TRACT) %>%
summarise(winscore = mean(win, na.rm = TRUE),
num_votes = n())
# merge census tracts and Place Pulse votes based on 'TRACT' column
atl_pp_wins <- left_join(atl, points_atl_s_nhood, by = c("TRACT" = "TRACT"))
st_geometry(points_atl_s_nhood) <- NULL
# merge census tracts and Place Pulse votes based on 'TRACT' column
atl_pp_wins <- left_join(atl, points_atl_s_nhood, by = c("TRACT" = "TRACT"))
# delete census tracts with 0 votes (NAs)
atl_pp_wins <- atl_pp_wins[!is.na(atl_pp_wins$winscore), ]
ggplot(data = atl_pp_wins) +
ggtitle("Proportion of 'safer' votes per census tract") +
geom_sf(aes(fill = winscore)) +
coord_sf(xlim = c(-84.7, -84), ylim = c(33.5, 34), expand = FALSE) +
theme_void()
summary(atl_pp_wins$winscore) # descriptive statistics: proportion 'safer' votes per tract
p <- ggplot(atl_pp_wins, aes(y = winscore))
p + geom_boxplot() + ggtitle("Boxplot of proportion of 'safer' votes per area") # boxplot
voter <- pp_data %>%
group_by(voter_uniqueid) %>%
summarise(num_votes = n())
# subset top 1% of most prolific participants
top_1percent <- subset(voter, num_votes > quantile(num_votes, prob = 1 - 1/100))
sum(top_1percent$num_votes) / sum(voter$num_votes) * 100
top_10percent <- subset(voter, num_votes > quantile(num_votes, prob = 1 - 10/100)) #subset top 10% participants
sum(top_10percent$num_votes) / sum(voter$num_votes) * 100 #Proportion of votes by top 10% participants
top_25percent <- subset(voter, num_votes > quantile(num_votes, prob = 1 - 25/100)) #subset top 25% participants
sum(top_25percent$num_votes) / sum(voter$num_votes) * 100 #Proportion of votes by top 25% participants
Gini(voter$num_votes)
plot(Lc(voter$num_votes),
xlab = "Cumulative share of participants from lowest to higher number of votes",
ylab = "Cumulative share of votes", col = "darkred", lwd = 2)
summary(atl_pp_wins$num_votes)
by_day <- pp_data %>%
mutate(day = ymd(day)) %>%
group_by(day) %>%
summarise(num_votes = n()) %>%
complete(day = seq.Date(min(day), max(day), by = "day")) %>%
mutate(num_votes = replace_na(num_votes, 0))
ggplot(by_day, aes(x = day, y = num_votes)) +
geom_line() +
geom_smooth(lwd = 1.5, col = "red") +
theme_bw() +
xlab("Days since website launch") +
ylab("Number of votes")
# download geojson from Georgia Association of Regional Commissions open data
atl <- geojson_sp("https://opendata.arcgis.com/datasets/04b79404794f43959cda4f8c3f1817e6_49.geojson")
?plot
plot(st_geometry(atl),
main = "Atlanta Region census tracts")
# convert sp file into st
atl <- st_as_sf(atl)
plot(st_geometry(atl),
main = "Atlanta Region census tracts")
ggplot(data = atl_pp_wins) + ggtitle("Proportion of 'safer' votes per census tract") +
geom_sf(aes(fill = num_votes)) +
coord_sf(xlim = c(-84.7, -84), ylim = c(33.5, 34), expand = FALSE) +
theme_void()
View(pp_atl_s)
View(atl_pp_wins)
atl_pp_wins$rate_votes <- atl_pp_wins$num_votes / atl_pp_wins$SQ_MILES
ggplot(data = atl_pp_wins) + ggtitle("Proportion of 'safer' votes per census tract") +
geom_sf(aes(fill = rate_votes)) +
coord_sf(xlim = c(-84.7, -84), ylim = c(33.5, 34), expand = FALSE) +
theme_void()
atl_pp_wins <- atl_pp_wins %>%
mutate(votes_sqmile = num_votes / SQ_MILES)
ggplot(data = atl_pp_wins) +
ggtitle("Number of votes per square mile") +
geom_sf(aes(fill = votes_sqmile)) +
coord_sf(xlim = c(-84.7, -84), ylim = c(33.5, 34), expand = FALSE) +
theme_void()
tabl <- "  # simple table creation here
| Tables        | Are           | Cool  |
|---------------|:-------------:|------:|
| col 2 is      | centered      |   $12 |
| zebra stripes | are neat      |    $1 |
"
cat(tabl) # output the table in a format good for HTML/PDF/docx conversion
24.5/(24.5+8.6)
21.1/(21.1+76)
76/(76+21.1)
8.6/(8.6+24.5)
6118/81630
View(points_atl_s)
View(points_atl_s)
points_atl_s %>%
group_by(left, right) %>% # categories based on vote (right, left or equal)
summarize(winscore = mean(win, na.rm = TRUE),
num_votes = n()) %>% # count number of units in each category
top_n(1)
points_atl_s %>%
group_by(left) %>% # categories based on vote (right, left or equal)
summarize(winscore = mean(win, na.rm = TRUE),
num_votes = n()) %>% # count number of units in each category
top_n(1)
points_atl_s %>%
group_by(left) %>% # categories based on vote (right, left or equal)
summarize(winscore = mean(win, na.rm = TRUE),
num_votes = n()) %>% # count number of units in each category
top_n(1, winscore)
points_atl_s %>%
group_by(left, right) %>% # categories based on vote (right, left or equal)
summarize(winscore = mean(win, na.rm = TRUE),
num_votes = n()) %>% # count number of units in each category
top_n(1, winscore)
pp_atl_s %>%
group_by(left, right) %>% # categories based on vote (right, left or equal)
summarize(winscore = mean(win, na.rm = TRUE),
num_votes = n()) %>% # count number of units in each category
top_n(1, winscore)
View(pp_atl_s)
pp_atl_s %>%
group_by(left) %>% # categories based on vote (right, left or equal)
summarize(winscore = mean(win, na.rm = TRUE),
num_votes = n()) %>% # count number of units in each category
filter(n > 9) %>%
top_n(1, winscore)
pp_atl_s %>%
group_by(left) %>% # categories based on vote (right, left or equal)
summarize(winscore = mean(win, na.rm = TRUE),
num_votes = n()) %>% # count number of units in each category
filter(num_votes > 9) %>%
top_n(1, winscore)
pp_atl_s %>%
group_by(left) %>% # categories based on vote (right, left or equal)
summarize(winscore = mean(win, na.rm = TRUE),
num_votes = n()) %>% # count number of units in each category
filter(num_votes > 9) %>%
top_n(5, winscore)
pp_atl_s %>%
group_by(left) %>% # categories based on vote (right, left or equal)
summarize(winscore = mean(win, na.rm = TRUE),
num_votes = n()) %>% # count number of units in each category
filter(num_votes > 9 & winscore > 0.95) %>%
top_n(5, winscore)
pp_atl_s %>%
group_by(left, right) %>% # categories based on vote (right, left or equal)
summarize(winscore = mean(win, na.rm = TRUE),
num_votes = n()) %>% # count number of units in each category
filter(num_votes > 9) %>%
top_n(5, winscore)
points_atl_s %>%
group_by(geometry) %>% # categories based on vote (right, left or equal)
summarize(winscore = mean(win, na.rm = TRUE),
num_votes = n()) %>% # count number of units in each category
filter(num_votes > 9) %>%
top_n(5, winscore)
points_atl_s %>%
mutate(geometry = as.factor(geometry)) %>%
group_by(geometry) %>% # categories based on vote (right, left or equal)
summarize(winscore = mean(win, na.rm = TRUE),
num_votes = n()) %>% # count number of units in each category
filter(num_votes > 9) %>%
top_n(5, winscore)
points_atl_s %>%
mutate(geometry = as.factor(geometry))
pp_atl_s %>%
group_by(long_Atl) %>% # categories based on vote (right, left or equal)
summarize(winscore = mean(win, na.rm = TRUE),
num_votes = n()) %>% # count number of units in each category
filter(num_votes > 9) %>%
top_n(5, winscore)
pp_atl_s %>%
group_by(long_Atl) %>% # categories based on vote (right, left or equal)
summarize(winscore = mean(win, na.rm = TRUE),
num_votes = n()) %>% # count number of units in each category
filter(num_votes > 9) %>%
top_n(1, winscore)
pp_atl_s %>%
group_by(long_Atl) %>% # categories based on vote (right, left or equal)
summarize(winscore = mean(win, na.rm = TRUE),
num_votes = n()) %>% # count number of units in each category
filter(num_votes > 9) %>%
filter(row_number()==1 | row_number()==n())
pp_atl_s %>%
group_by(long_Atl) %>% # categories based on vote (right, left or equal)
summarize(winscore = mean(win, na.rm = TRUE),
num_votes = n()) %>% # count number of units in each category
filter(num_votes > 9) %>%
arrange(winscore) %>%
filter(row_number()==1 | row_number()==n())
pp_atl_s %>%
group_by(long_Atl, lat_Atl) %>% # categories based on vote (right, left or equal)
summarize(winscore = mean(win, na.rm = TRUE),
num_votes = n()) %>% # count number of units in each category
filter(num_votes > 9) %>%
arrange(winscore) %>%
filter(row_number()==1 | row_number()==n())
points_atl_s$geometry
class(points_atl_s$geometry)
points_atl_s %>%
mutate(geom_text = as.character(st_geometry(geometry)))
points_atl_s %>%
mutate(geom_text = as.character(st_geometry(geometry))) %>%
group_by(geom_text) %>% # categories based on vote (right, left or equal)
summarize(winscore = mean(win, na.rm = TRUE),
num_votes = n()) %>% # count number of units in each category
filter(num_votes > 9) %>%
arrange(winscore) %>%
filter(row_number()==1 | row_number()==n())
points_atl_s %>%
mutate(geom_text = as.character(st_geometry(geometry))) %>%
group_by(geom_text) %>% # categories based on vote (right, left or equal)
summarize(winscore = mean(win, na.rm = TRUE),
num_votes = n()) %>% # count number of units in each category
filter(num_votes > 9) %>%
arrange(winscore) %>%
filter(row_number()==1 | row_number()==n())
summary(atl_pp_wins$num_votes)
points_atl_s %>%
mutate(geom_text = as.character(st_geometry(geometry))) %>%
group_by(geom_text) %>% # categories based on vote (right, left or equal)
summarize(winscore = mean(win, na.rm = TRUE),
num_votes = n()) %>% # count number of units in each category
filter(num_votes >= 15) %>%
arrange(winscore) %>%
filter(row_number()==1 | row_number()==n())
points_atl_s %>%
mutate(geom_text = as.character(st_geometry(geometry))) %>%
group_by(geom_text) %>% # categories based on vote (right, left or equal)
summarize(winscore = mean(win, na.rm = TRUE),
num_votes = n()) %>% # count number of units in each category
filter(num_votes >= 20) %>%
arrange(winscore) %>%
filter(row_number()==1 | row_number()==n())
points_atl_s %>%
mutate(geom_text = as.character(st_geometry(geometry))) %>%
group_by(geom_text) %>% # categories based on vote (right, left or equal)
summarize(winscore = mean(win, na.rm = TRUE),
num_votes = n()) %>% # count number of units in each category
filter(num_votes >= 15) %>%
arrange(winscore) %>%
filter(row_number()==1 | row_number()==n())
points_atl_s %>%
mutate(geom_text = as.character(st_geometry(geometry))) %>%
group_by(geom_text) %>% # categories based on vote (right, left or equal)
summarize(winscore = mean(win, na.rm = TRUE),
num_votes = n()) %>% # count number of units in each category
filter(num_votes >= 20) %>%
arrange(winscore) %>%
filter(row_number()==1 | row_number()==n())
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(ggplot2)
library(sf)
library(ineq)
library(lubridate)
library(tidyr)
library(dplyr)
library(purrr)
pp_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
pp_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
pp_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
pp_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
pp_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
pp_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
pp_data <- read.csv('https://ndownloader.figshare.com/files/21739137')
# merge census tracts and Place Pulse votes based on 'TRACT' column
atl_pp_wins <- left_join(atl, points_atl_s_nhood, by = c("TRACT" = "TRACT"))
atl_pp_wins <- atl_pp_wins %>%
filter(!is.na(winscore))
# merge census tracts and Place Pulse votes based on 'TRACT' column
atl_pp_wins <- left_join(atl, points_atl_s_nhood, by = c("TRACT" = "TRACT"))
# delete census tracts with 0 votes (NAs)
atl_pp_wins <- atl_pp_wins[!is.na(atl_pp_wins$winscore), ]
points_atl_s %>%
mutate(geom_text = as.character(st_geometry(geometry))) %>% # geographic information into character
group_by(geom_text) %>% # group votets based on geographic information of photographs
summarize(winscore = mean(win, na.rm = TRUE), # calculate proportion of 'safer' responses
num_votes = n()) %>% # count number of votes
filter(num_votes >= 20) %>% # filter out pictures with less than 20 votes
arrange(winscore) %>% # order by proportion of 'safer' responses
top_n(5) # print lowest and highest score
points_atl_s %>%
mutate(geom_text = as.character(st_geometry(geometry))) %>% # geographic information into character
group_by(geom_text) %>% # group votets based on geographic information of photographs
summarize(winscore = mean(win, na.rm = TRUE), # calculate proportion of 'safer' responses
num_votes = n()) %>% # count number of votes
filter(num_votes >= 20) %>% # filter out pictures with less than 20 votes
arrange(winscore) %>% # order by proportion of 'safer' responses
top_n(5, winscore) # print lowest and highest score
points_atl_s %>%
mutate(geom_text = as.character(st_geometry(geometry))) %>% # geographic information into character
group_by(geom_text) %>% # group votets based on geographic information of photographs
summarize(winscore = mean(win, na.rm = TRUE), # calculate proportion of 'safer' responses
num_votes = n()) %>% # count number of votes
filter(num_votes >= 20) %>% # filter out pictures with less than 20 votes
top_n(5) # print lowest and highest score
points_atl_s %>%
mutate(geom_text = as.character(st_geometry(geometry))) %>% # geographic information into character
group_by(geom_text) %>% # group votets based on geographic information of photographs
summarize(winscore = mean(win, na.rm = TRUE), # calculate proportion of 'safer' responses
num_votes = n()) %>% # count number of votes
filter(num_votes >= 20) %>% # filter out pictures with less than 20 votes
arrange(winscore) %>% # order by proportion of 'safer' responses
top_n(5, num_votes) # print lowest and highest score
points_atl_s %>%
mutate(geom_text = as.character(st_geometry(geometry))) %>% # geographic information into character
group_by(geom_text) %>% # group votets based on geographic information of photographs
summarize(winscore = mean(win, na.rm = TRUE), # calculate proportion of 'safer' responses
num_votes = n()) %>% # count number of votes
filter(num_votes >= 20) %>% # filter out pictures with less than 20 votes
arrange(winscore) %>% # order by proportion of 'safer' responses
top_n(5) # print lowest and highest score
points_atl_s %>%
mutate(geom_text = as.character(st_geometry(geometry))) %>% # geographic information into character
group_by(geom_text) %>% # group votets based on geographic information of photographs
summarize(winscore = mean(win, na.rm = TRUE), # calculate proportion of 'safer' responses
num_votes = n()) %>% # count number of votes
filter(num_votes >= 20) %>% # filter out pictures with less than 20 votes
arrange(winscore) %>% # order by proportion of 'safer' responses
head(5) # print lowest and highest score
points_atl_s %>%
mutate(geom_text = as.character(st_geometry(geometry))) %>% # geographic information into character
group_by(geom_text) %>% # group votets based on geographic information of photographs
summarize(winscore = mean(win, na.rm = TRUE), # calculate proportion of 'safer' responses
num_votes = n()) %>% # count number of votes
filter(num_votes >= 20) %>% # filter out pictures with less than 20 votes
arrange(winscore) %>% # order by proportion of 'safer' responses
filter(row_number()==1 | row_number()==n()) # print lowest and highest score
points_atl_s %>%
mutate(geom_text = as.character(st_geometry(geometry))) %>% # geographic information into character
group_by(geom_text) %>% # group votets based on geographic information of photographs
summarize(winscore = mean(win, na.rm = TRUE), # calculate proportion of 'safer' responses
num_votes = n()) %>% # count number of votes
filter(num_votes >= 20) %>% # filter out pictures with less than 20 votes
arrange(desd(winscore)) %>% # order by proportion of 'safer' responses
filter(row_number()==1 | row_number()==n()) # print lowest and highest score
points_atl_s %>%
mutate(geom_text = as.character(st_geometry(geometry))) %>% # geographic information into character
group_by(geom_text) %>% # group votets based on geographic information of photographs
summarize(winscore = mean(win, na.rm = TRUE), # calculate proportion of 'safer' responses
num_votes = n()) %>% # count number of votes
filter(num_votes >= 20) %>% # filter out pictures with less than 20 votes
arrange(desc(winscore)) %>% # order by proportion of 'safer' responses
filter(row_number()==1 | row_number()==n()) # print lowest and highest score
points_atl_s %>%
mutate(geom_text = as.character(st_geometry(geometry))) %>% # geographic information into character
group_by(geom_text) %>% # group votets based on geographic information of photographs
summarize(winscore = mean(win, na.rm = TRUE), # calculate proportion of 'safer' responses
num_votes = n()) %>% # count number of votes
filter(num_votes >= 20) %>% # filter out pictures with less than 20 votes
arrange(desc(winscore)) %>% # order by proportion of 'safer' responses
head(5) # print lowest and highest score
points_atl_s %>%
mutate(geom_text = as.character(st_geometry(geometry))) %>% # geographic information into character
group_by(geom_text) %>% # group votets based on geographic information of photographs
summarize(winscore = mean(win, na.rm = TRUE), # calculate proportion of 'safer' responses
num_votes = n()) %>% # count number of votes
filter(num_votes >= 20) %>% # filter out pictures with less than 20 votes
arrange(desc(winscore)) %>% # order by proportion of 'safer' responses
head(-5) # print lowest and highest score
points_atl_s %>%
mutate(geom_text = as.character(st_geometry(geometry))) %>% # geographic information into character
group_by(geom_text) %>% # group votets based on geographic information of photographs
summarize(winscore = mean(win, na.rm = TRUE), # calculate proportion of 'safer' responses
num_votes = n()) %>% # count number of votes
filter(num_votes >= 20) %>% # filter out pictures with less than 20 votes
arrange(desc(winscore)) %>% # order by proportion of 'safer' responses
tail(5) # print lowest and highest score
100-78.3
top_10percent <- subset(voter, num_votes > quantile(num_votes, prob = 1 - 10/100)) #subset top 10% participants
sum(top_10percent$num_votes) / sum(voter$num_votes) * 100 #Proportion of votes by top 10% participants
sum(top_10percent$num_votes) / sum(voter$num_votes) * 100 #Proportion of votes by top 10% participants
sum(top_25percent$num_votes) / sum(voter$num_votes) * 100 #Proportion of votes by top 25% participants
mean(atl_pp_wins$num_votes)
max(atl_pp_wins$num_votes)
round(min(atl_pp_wins$num_votes), 2)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(ggplot2)
library(sf)
library(ineq)
library(lubridate)
library(tidyr)
library(dplyr)
library(purrr)
top_10percent <- subset(voter, num_votes > quantile(num_votes, prob = 1 - 10/100)) #subset top 10% participants
sum(top_10percent$num_votes) / sum(voter$num_votes) * 100 #Proportion of votes by top 10% participants
top_25percent <- subset(voter, num_votes > quantile(num_votes, prob = 1 - 25/100)) #subset top 25% participants
sum(top_25percent$num_votes) / sum(voter$num_votes) * 100 #Proportion of votes by top 25% participants
atl_pp_wins <- left_join(atl, points_atl_s_nhood, by = c("TRACT" = "TRACT")) %>%
filter(!is.na(winscore))
# merge census tracts and Place Pulse votes based on 'TRACT' column
atl_pp_wins <- left_join(atl, points_atl_s_nhood, by = c("TRACT" = "TRACT"))
# delete census tracts with 0 votes (NAs)
atl_pp_wins <- atl_pp_wins %>%
filter(!is.na(winscore))
atl_pp_wins <- left_join(atl, points_atl_s_nhood, by = c("TRACT" = "TRACT")) %>%
filter(!is.na(winscore))
points_atl_s %>%
mutate(geom_text = as.character(st_geometry(geometry))) %>% # spatial data into character
group_by(geom_text) %>% # group votes based on spatial data
summarize(winscore = mean(win, na.rm = TRUE), # calculate proportion of 'safer'
num_votes = n()) %>% # count number of votes
filter(num_votes >= 20) %>% # filter out pictures with less than 20 votes
arrange(desc(winscore)) %>% # order by proportion of 'safer' responses
filter(row_number() == 1 | row_number() == n()) # print lowest and highest score
